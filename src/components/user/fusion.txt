export { default as UserCard } from './UserCard';
export { default as UserProfileHeader } from './UserProfileHeader';'use client';

import { motion } from 'framer-motion';
import { Star, MessageCircle } from 'lucide-react';
import Link from 'next/link';
import { Card, CardContent, Avatar, Button } from '@/components/ui';
import { ROUTES } from '@/lib/utils/constants';
import type { User } from '@/types';

interface UserCardProps {
  user: User;
  averageRating?: number;
  totalAvis?: number;
  onMessage?: () => void;
}

export default function UserCard({ user, averageRating, totalAvis, onMessage }: UserCardProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <Card hoverable>
        <CardContent className="p-5">
          <Link href={ROUTES.USER_PROFILE(user.id)} className="block mb-4">
            <div className="flex flex-col items-center text-center">
              <Avatar
                src={user.photo || undefined}
                fallback={`${user.nom} ${user.prenom}`}
                size="lg"
                verified={user.emailVerifie}
              />
              <h3 className="mt-3 font-semibold text-gray-900">
                {user.prenom} {user.nom}
              </h3>
              
              {user.bio && (
                <p className="mt-1 text-sm text-gray-600 line-clamp-2">
                  {user.bio}
                </p>
              )}
            </div>
          </Link>

          {/* Stats */}
          <div className="flex items-center justify-center gap-4 py-3 border-y border-gray-200">
            {averageRating !== undefined && (
              <div className="flex items-center gap-1 text-sm">
                <Star className="w-4 h-4 fill-warning text-warning" />
                <span className="font-medium">{averageRating.toFixed(1)}</span>
                {totalAvis !== undefined && (
                  <span className="text-gray-500">({totalAvis})</span>
                )}
              </div>
            )}
          </div>

          {/* Actions */}
          {onMessage && (
            <div className="mt-4">
              <Button
                variant="primary"
                onClick={onMessage}
                leftIcon={<MessageCircle className="w-4 h-4" />}
                className="w-full"
              >
                Contacter
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
}'use client';

import { motion } from 'framer-motion';
import { Mail, Phone, Calendar, Star, Edit } from 'lucide-react';
import { Avatar, Button, Badge } from '@/components/ui';
import { formatDate, formatPhone } from '@/lib/utils/format';
import type { User } from '@/types';

interface UserProfileHeaderProps {
  user: User;
  averageRating?: number;
  totalAvis?: number;
  isOwnProfile?: boolean;
  onEdit?: () => void;
  onMessage?: () => void;
}

export default function UserProfileHeader({
  user,
  averageRating,
  totalAvis,
  isOwnProfile = false,
  onEdit,
  onMessage,
}: UserProfileHeaderProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="card p-6"
    >
      <div className="flex flex-col md:flex-row gap-6">
        {/* Avatar */}
        <div className="flex-shrink-0">
          <Avatar
            src={user.photo || undefined}
            fallback={`${user.nom} ${user.prenom}`}
            size="xl"
            verified={user.emailVerifie}
          />
        </div>

        {/* Info */}
        <div className="flex-1">
          <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-4 mb-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 mb-2">
                {user.prenom} {user.nom}
              </h1>

              {/* Badges */}
              <div className="flex flex-wrap gap-2 mb-3">
                {user.emailVerifie && (
                  <Badge variant="success" size="sm">
                    Email vérifié
                  </Badge>
                )}
                {user.telephoneVerifie && (
                  <Badge variant="success" size="sm">
                    Téléphone vérifié
                  </Badge>
                )}
              </div>

              {/* Rating */}
              {averageRating !== undefined && (
                <div className="flex items-center gap-2 text-sm">
                  <Star className="w-4 h-4 fill-warning text-warning" />
                  <span className="font-medium">{averageRating.toFixed(1)}</span>
                  {totalAvis !== undefined && (
                    <span className="text-gray-500">({totalAvis} avis)</span>
                  )}
                </div>
              )}
            </div>

            {/* Actions */}
            <div className="flex gap-2">
              {isOwnProfile && onEdit ? (
                <Button
                  variant="outline"
                  onClick={onEdit}
                  leftIcon={<Edit className="w-4 h-4" />}
                >
                  Modifier
                </Button>
              ) : (
                onMessage && (
                  <Button variant="primary" onClick={onMessage}>
                    Contacter
                  </Button>
                )
              )}
            </div>
          </div>

          {/* Bio */}
          {user.bio && (
            <p className="text-gray-700 mb-4">{user.bio}</p>
          )}

          {/* Contact Info */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
            <div className="flex items-center gap-2 text-gray-600">
              <Mail className="w-4 h-4" />
              <span>{user.email}</span>
            </div>

            {user.telephone && (
              <div className="flex items-center gap-2 text-gray-600">
                <Phone className="w-4 h-4" />
                <span>{formatPhone(user.telephone)}</span>
              </div>
            )}

            <div className="flex items-center gap-2 text-gray-600">
              <Calendar className="w-4 h-4" />
              <span>Membre depuis {formatDate(user.createdAt)}</span>
            </div>
          </div>
        </div>
      </div>
    </motion.div>
  );
}