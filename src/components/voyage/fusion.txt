export { default as VoyageCard } from './VoyageCard';
export { default as VoyageList } from './VoyageList';
export { default as VoyageFilters } from './VoyageFilters';
export { default as VoyageDetails } from './VoyageDetails';
export { default as VoyageStatusBadge } from './VoyageStatusBadge';'use client';

import { motion } from 'framer-motion';
import { Calendar, MapPin, Package } from 'lucide-react';
import Link from 'next/link';
import { Card, CardContent, Avatar } from '@/components/ui';
import VoyageStatusBadge from './VoyageStatusBadge';
import { formatDateShort, formatWeight } from '@/lib/utils/format';
import { ROUTES } from '@/lib/utils/constants';
import type { Voyage } from '@/types';

interface VoyageCardProps {
  voyage: Voyage;
}

export default function VoyageCard({ voyage }: VoyageCardProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <Link href={ROUTES.VOYAGE_DETAILS(voyage.id)}>
        <Card hoverable className="h-full">
          <CardContent className="p-5">
            {/* Header */}
            <div className="flex items-start justify-between mb-4">
              <div className="flex items-center gap-3">
                <Avatar
                  src={voyage.voyageur.photo || undefined}
                  fallback={`${voyage.voyageur.nom} ${voyage.voyageur.prenom}`}
                  size="md"
                  verified={voyage.voyageur.emailVerifie}
                />
                <div>
                  <p className="font-medium text-gray-900">
                    {voyage.voyageur.prenom} {voyage.voyageur.nom}
                  </p>
                  <p className="text-sm text-gray-500">Voyageur</p>
                </div>
              </div>
              <VoyageStatusBadge statut={voyage.statut} size="sm" />
            </div>

            {/* Route */}
            <div className="space-y-3 mb-4">
              <div className="flex items-center gap-3">
                <div className="flex-shrink-0 w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                  <MapPin className="w-4 h-4 text-primary" />
                </div>
                <div className="flex-1">
                  <p className="text-sm text-gray-500">Départ</p>
                  <p className="font-semibold text-gray-900">{voyage.villeDepart}</p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <div className="flex-shrink-0 w-8 h-8 rounded-full bg-accent/10 flex items-center justify-center">
                  <MapPin className="w-4 h-4 text-accent" />
                </div>
                <div className="flex-1">
                  <p className="text-sm text-gray-500">Arrivée</p>
                  <p className="font-semibold text-gray-900">{voyage.villeArrivee}</p>
                </div>
              </div>
            </div>

            {/* Info */}
            <div className="grid grid-cols-2 gap-3 pt-3 border-t border-gray-200">
              <div className="flex items-center gap-2 text-sm">
                <Calendar className="w-4 h-4 text-gray-400" />
                <span className="text-gray-600">{formatDateShort(voyage.dateDepart)}</span>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <Package className="w-4 h-4 text-gray-400" />
                <span className="text-gray-600">{formatWeight(voyage.poidsDisponible)}</span>
              </div>
            </div>

            {/* Description */}
            {voyage.description && (
              <p className="mt-3 text-sm text-gray-600 line-clamp-2">
                {voyage.description}
              </p>
            )}
          </CardContent>
        </Card>
      </Link>
    </motion.div>
  );
}'use client';

import { motion } from 'framer-motion';
import { Calendar, Package, MessageCircle, AlertCircle } from 'lucide-react';
import Link from 'next/link';
import { Card, CardHeader, CardContent, Avatar, Button } from '@/components/ui';
import VoyageStatusBadge from './VoyageStatusBadge';
import { formatDate, formatWeight } from '@/lib/utils/format';
import { ROUTES } from '@/lib/utils/constants';
import type { Voyage } from '@/types';

interface VoyageDetailsProps {
  voyage: Voyage;
  isOwner?: boolean;
  onEdit?: () => void;
  onDelete?: () => void;
  onContact?: () => void;
}

export default function VoyageDetails({ 
  voyage, 
  isOwner = false,
  onEdit,
  onDelete,
  onContact 
}: VoyageDetailsProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-6"
    >
      {/* Header Card */}
      <Card>
        <CardHeader
          title={`${voyage.villeDepart} → ${voyage.villeArrivee}`}
          action={<VoyageStatusBadge statut={voyage.statut} />}
        />
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Date de départ */}
            <div className="flex items-start gap-3">
              <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0">
                <Calendar className="w-5 h-5 text-primary" />
              </div>
              <div>
                <p className="text-sm text-gray-500">Départ</p>
                <p className="font-semibold text-gray-900">{formatDate(voyage.dateDepart)}</p>
              </div>
            </div>

            {/* Date d'arrivée */}
            <div className="flex items-start gap-3">
              <div className="w-10 h-10 rounded-lg bg-accent/10 flex items-center justify-center flex-shrink-0">
                <Calendar className="w-5 h-5 text-accent" />
              </div>
              <div>
                <p className="text-sm text-gray-500">Arrivée</p>
                <p className="font-semibold text-gray-900">{formatDate(voyage.dateArrivee)}</p>
              </div>
            </div>

            {/* Poids disponible */}
            <div className="flex items-start gap-3">
              <div className="w-10 h-10 rounded-lg bg-secondary/10 flex items-center justify-center flex-shrink-0">
                <Package className="w-5 h-5 text-secondary" />
              </div>
              <div>
                <p className="text-sm text-gray-500">Poids disponible</p>
                <p className="font-semibold text-gray-900">{formatWeight(voyage.poidsDisponible)}</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Description */}
      {voyage.description && (
        <Card>
          <CardHeader title="Description" />
          <CardContent>
            <p className="text-gray-700 whitespace-pre-wrap">{voyage.description}</p>
          </CardContent>
        </Card>
      )}

      {/* Voyageur Info */}
      <Card>
        <CardHeader title="Voyageur" />
        <CardContent>
          <div className="flex items-center justify-between">
            <Link
              href={ROUTES.USER_PROFILE(voyage.voyageur.id)}
              className="flex items-center gap-4 group"
            >
              <Avatar
                src={voyage.voyageur.photo || undefined}
                fallback={`${voyage.voyageur.nom} ${voyage.voyageur.prenom}`}
                size="lg"
                verified={voyage.voyageur.emailVerifie}
              />
              <div>
                <p className="font-semibold text-gray-900 group-hover:text-primary transition-colors">
                  {voyage.voyageur.prenom} {voyage.voyageur.nom}
                </p>
                {voyage.voyageur.bio && (
                  <p className="text-sm text-gray-600 line-clamp-2 mt-1">
                    {voyage.voyageur.bio}
                  </p>
                )}
              </div>
            </Link>

            {!isOwner && voyage.statut === 'actif' && (
              <Button
                variant="primary"
                leftIcon={<MessageCircle className="w-4 h-4" />}
                onClick={onContact}
              >
                Contacter
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Owner Actions */}
      {isOwner && (
        <Card>
          <CardContent className="p-4">
            <div className="flex flex-wrap gap-3">
              <Button
                variant="outline"
                onClick={onEdit}
                className="flex-1 md:flex-none"
              >
                Modifier
              </Button>
              <Button
                variant="danger"
                onClick={onDelete}
                className="flex-1 md:flex-none"
                leftIcon={<AlertCircle className="w-4 h-4" />}
              >
                Supprimer
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </motion.div>
  );
}'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Filter, X } from 'lucide-react';
import { Button, Input } from '@/components/ui';
import { TOUTES_VILLES, VOYAGE_STATUTS } from '@/lib/utils/constants';
import type { VoyageFilters as VoyageFiltersType } from '@/types';

interface VoyageFiltersProps {
  onFilterChange: (filters: VoyageFiltersType) => void;
  initialFilters?: VoyageFiltersType;
}

export default function VoyageFilters({ onFilterChange, initialFilters = {} }: VoyageFiltersProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [filters, setFilters] = useState<VoyageFiltersType>(initialFilters);

  const handleFilterChange = (key: keyof VoyageFiltersType, value: string) => {
    const newFilters = { ...filters, [key]: value || undefined };
    setFilters(newFilters);
    onFilterChange(newFilters);
  };

  const clearFilters = () => {
    setFilters({});
    onFilterChange({});
  };

  const hasActiveFilters = Object.values(filters).some(v => v);

  return (
    <div className="space-y-4">
      {/* Filter Toggle Button */}
      <div className="flex items-center justify-between">
        <Button
          variant="outline"
          size="md"
          onClick={() => setIsOpen(!isOpen)}
          leftIcon={<Filter className="w-4 h-4" />}
        >
          Filtres
          {hasActiveFilters && (
            <span className="ml-2 w-2 h-2 bg-primary rounded-full" />
          )}
        </Button>

        {hasActiveFilters && (
          <button
            onClick={clearFilters}
            className="text-sm text-gray-600 hover:text-error transition-colors flex items-center gap-1"
          >
            <X className="w-4 h-4" />
            Effacer tout
          </button>
        )}
      </div>

      {/* Filters Panel */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.2 }}
            className="overflow-hidden"
          >
            <div className="card p-4 space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {/* Ville de départ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ville de départ
                  </label>
                  <select
                    value={filters.villeDepart || ''}
                    onChange={(e) => handleFilterChange('villeDepart', e.target.value)}
                    className="input"
                  >
                    <option value="">Toutes les villes</option>
                    {TOUTES_VILLES.map((ville) => (
                      <option key={ville} value={ville}>
                        {ville}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Ville d'arrivée */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ville d&apos;arrivée
                  </label>
                  <select
                    value={filters.villeArrivee || ''}
                    onChange={(e) => handleFilterChange('villeArrivee', e.target.value)}
                    className="input"
                  >
                    <option value="">Toutes les villes</option>
                    {TOUTES_VILLES.map((ville) => (
                      <option key={ville} value={ville}>
                        {ville}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Date de départ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Date de départ
                  </label>
                  <Input
                    type="date"
                    value={filters.dateDepart || ''}
                    onChange={(e) => handleFilterChange('dateDepart', e.target.value)}
                  />
                </div>

                {/* Statut */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Statut
                  </label>
                  <select
                    value={filters.statut || ''}
                    onChange={(e) => handleFilterChange('statut', e.target.value)}
                    className="input"
                  >
                    <option value="">Tous les statuts</option>
                    {VOYAGE_STATUTS.map((status) => (
                      <option key={status.value} value={status.value}>
                        {status.label}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}'use client';

import { motion } from 'framer-motion';
import VoyageCard from './VoyageCard';
import type { Voyage, PaginationMeta } from '@/types';

interface VoyageListProps {
  voyages: Voyage[];
  pagination?: PaginationMeta | null;
  onPageChange?: (page: number) => void;
  isLoading?: boolean;
}

export default function VoyageList({ 
  voyages, 
  pagination, 
  onPageChange,
  isLoading = false 
}: VoyageListProps) {
  if (isLoading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {[...Array(6)].map((_, i) => (
          <div key={i} className="card p-5 animate-pulse">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-gray-200 rounded-full" />
              <div className="flex-1 space-y-2">
                <div className="h-4 bg-gray-200 rounded w-3/4" />
                <div className="h-3 bg-gray-200 rounded w-1/2" />
              </div>
            </div>
            <div className="space-y-3">
              <div className="h-4 bg-gray-200 rounded" />
              <div className="h-4 bg-gray-200 rounded" />
              <div className="h-16 bg-gray-200 rounded mt-4" />
            </div>
          </div>
        ))}
      </div>
    );
  }

  if (voyages.length === 0) {
    return (
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        className="text-center py-12"
      >
        <div className="w-20 h-20 mx-auto mb-4 rounded-full bg-gray-100 flex items-center justify-center">
          <svg className="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
          </svg>
        </div>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          Aucun voyage trouvé
        </h3>
        <p className="text-gray-600">
          Essayez de modifier vos critères de recherche
        </p>
      </motion.div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {voyages.map((voyage) => (
          <VoyageCard key={voyage.id} voyage={voyage} />
        ))}
      </div>

      {/* Pagination */}
      {pagination && pagination.pages > 1 && (
        <div className="flex items-center justify-center gap-2">
          <button
            onClick={() => onPageChange?.(pagination.page - 1)}
            disabled={pagination.page === 1}
            className="px-4 py-2 rounded-lg border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            Précédent
          </button>

          <div className="flex items-center gap-1">
            {[...Array(pagination.pages)].map((_, index) => {
              const page = index + 1;
              const isCurrentPage = page === pagination.page;
              const isNearCurrent = Math.abs(page - pagination.page) <= 1;
              const isFirstOrLast = page === 1 || page === pagination.pages;

              if (!isNearCurrent && !isFirstOrLast) {
                if (page === 2 || page === pagination.pages - 1) {
                  return <span key={page} className="px-2">...</span>;
                }
                return null;
              }

              return (
                <button
                  key={page}
                  onClick={() => onPageChange?.(page)}
                  className={`w-10 h-10 rounded-lg font-medium transition-colors ${
                    isCurrentPage
                      ? 'bg-primary text-white'
                      : 'border border-gray-300 text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  {page}
                </button>
              );
            })}
          </div>

          <button
            onClick={() => onPageChange?.(pagination.page + 1)}
            disabled={pagination.page === pagination.pages}
            className="px-4 py-2 rounded-lg border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            Suivant
          </button>
        </div>
      )}
    </div>
  );
}import { Badge } from '@/components/ui';
import type { VoyageStatut } from '@/types';

interface VoyageStatusBadgeProps {
  statut: VoyageStatut;
  size?: 'sm' | 'md' | 'lg';
}

export default function VoyageStatusBadge({ statut, size = 'md' }: VoyageStatusBadgeProps) {
  const statusConfig = {
    actif: { variant: 'success' as const, label: 'Actif', dot: true },
    complet: { variant: 'warning' as const, label: 'Complet', dot: false },
    termine: { variant: 'neutral' as const, label: 'Terminé', dot: false },
    annule: { variant: 'error' as const, label: 'Annulé', dot: false },
  };

  const config = statusConfig[statut];

  return (
    <Badge variant={config.variant} size={size} dot={config.dot}>
      {config.label}
    </Badge>
  );
}