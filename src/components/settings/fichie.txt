// Barrel export pour tous les composants Settings

export { default as NotificationSettingsForm } from './NotificationSettingsForm';
export { default as PrivacySettingsForm } from './PrivacySettingsForm';
export { default as PreferencesSettingsForm } from './PreferencesSettingsForm';
export { default as RgpdSettingsForm } from './RgpdSettingsForm';
export { default as SecuritySettingsForm } from './SecuritySettingsForm';'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Bell, Mail, MessageSquare, Smartphone } from 'lucide-react';
import { Button } from '@/components/ui';
import { notificationSettingsSchema, type NotificationSettingsFormData } from '@/lib/validations';
import type { UserSettings } from '@/types';

interface NotificationSettingsFormProps {
  settings: UserSettings;
  onSubmit: (data: Partial<UserSettings>) => Promise<void>;
  isLoading?: boolean;
}

export default function NotificationSettingsForm({ 
  settings, 
  onSubmit, 
  isLoading 
}: NotificationSettingsFormProps) {
  const { register, handleSubmit, formState: { isDirty } } = useForm<NotificationSettingsFormData>({
    resolver: zodResolver(notificationSettingsSchema),
    defaultValues: {
      emailNotificationsEnabled: settings.emailNotificationsEnabled,
      smsNotificationsEnabled: settings.smsNotificationsEnabled,
      pushNotificationsEnabled: settings.pushNotificationsEnabled,
      notifyOnNewMessage: settings.notifyOnNewMessage,
      notifyOnMatchingVoyage: settings.notifyOnMatchingVoyage,
      notifyOnMatchingDemande: settings.notifyOnMatchingDemande,
      notifyOnNewAvis: settings.notifyOnNewAvis,
      notifyOnFavoriUpdate: settings.notifyOnFavoriUpdate,
    },
  });

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      {/* Canaux de notification */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
          <Bell className="w-5 h-5 text-primary" />
          Canaux de notification
        </h3>
        
        <div className="space-y-3">
          <label className="flex items-center gap-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <Mail className="w-5 h-5 text-gray-400" />
            <div className="flex-1">
              <p className="font-medium text-gray-900">Email</p>
              <p className="text-sm text-gray-600">Recevoir des notifications par email</p>
            </div>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('emailNotificationsEnabled')} />
          </label>

          <label className="flex items-center gap-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <MessageSquare className="w-5 h-5 text-gray-400" />
            <div className="flex-1">
              <p className="font-medium text-gray-900">SMS</p>
              <p className="text-sm text-gray-600">Recevoir des notifications par SMS</p>
            </div>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('smsNotificationsEnabled')} />
          </label>

          <label className="flex items-center gap-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <Smartphone className="w-5 h-5 text-gray-400" />
            <div className="flex-1">
              <p className="font-medium text-gray-900">Push</p>
              <p className="text-sm text-gray-600">Recevoir des notifications push</p>
            </div>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('pushNotificationsEnabled')} />
          </label>
        </div>
      </div>

      {/* Types de notifications */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900">Types de notifications</h3>
        
        <div className="space-y-2">
          <label className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <span className="text-gray-900">Nouveaux messages</span>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('notifyOnNewMessage')} />
          </label>

          <label className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <span className="text-gray-900">Voyages correspondants</span>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('notifyOnMatchingVoyage')} />
          </label>

          <label className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <span className="text-gray-900">Demandes correspondantes</span>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('notifyOnMatchingDemande')} />
          </label>

          <label className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <span className="text-gray-900">Nouveaux avis</span>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('notifyOnNewAvis')} />
          </label>

          <label className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <span className="text-gray-900">Mise à jour des favoris</span>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('notifyOnFavoriUpdate')} />
          </label>
        </div>
      </div>

      <Button
        type="submit"
        variant="primary"
        isLoading={isLoading}
        disabled={!isDirty || isLoading}
        className="w-full"
      >
        Enregistrer les modifications
      </Button>
    </form>
  );
}'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Globe, DollarSign, Clock, Calendar } from 'lucide-react';
import { Button } from '@/components/ui';
import { preferencesSettingsSchema, type PreferencesSettingsFormData } from '@/lib/validations';
import type { UserSettings } from '@/types';

interface PreferencesSettingsFormProps {
  settings: UserSettings;
  onSubmit: (data: Partial<UserSettings>) => Promise<void>;
  isLoading?: boolean;
}

export default function PreferencesSettingsForm({ 
  settings, 
  onSubmit, 
  isLoading 
}: PreferencesSettingsFormProps) {
  const { register, handleSubmit, formState: { errors, isDirty } } = useForm<PreferencesSettingsFormData>({
    resolver: zodResolver(preferencesSettingsSchema),
    defaultValues: {
      langue: settings.langue,
      devise: settings.devise,
      timezone: settings.timezone,
      dateFormat: settings.dateFormat,
    },
  });

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      {/* Langue */}
      <div className="space-y-3">
        <label className="flex items-center gap-2 text-sm font-medium text-gray-700">
          <Globe className="w-4 h-4 text-primary" />
          Langue de l&apos;interface
        </label>
        <select className="input" {...register('langue')}>
          <option value="fr">Français</option>
          <option value="en">English</option>
        </select>
        {errors.langue && (
          <p className="text-sm text-error">{errors.langue.message}</p>
        )}
      </div>

      {/* Devise */}
      <div className="space-y-3">
        <label className="flex items-center gap-2 text-sm font-medium text-gray-700">
          <DollarSign className="w-4 h-4 text-primary" />
          Devise préférée
        </label>
        <select className="input" {...register('devise')}>
          <option value="XAF">Franc CFA (XAF)</option>
          <option value="EUR">Euro (EUR)</option>
          <option value="USD">Dollar US (USD)</option>
        </select>
        {errors.devise && (
          <p className="text-sm text-error">{errors.devise.message}</p>
        )}
        <p className="text-xs text-gray-500">
          Cette devise sera utilisée pour afficher les prix et commissions
        </p>
      </div>

      {/* Fuseau horaire */}
      <div className="space-y-3">
        <label className="flex items-center gap-2 text-sm font-medium text-gray-700">
          <Clock className="w-4 h-4 text-primary" />
          Fuseau horaire
        </label>
        <select className="input" {...register('timezone')}>
          <option value="Africa/Douala">Afrique/Douala (GMT+1)</option>
          <option value="Europe/Paris">Europe/Paris (GMT+1)</option>
          <option value="Europe/London">Europe/Londres (GMT+0)</option>
          <option value="America/New_York">Amérique/New York (GMT-5)</option>
          <option value="America/Los_Angeles">Amérique/Los Angeles (GMT-8)</option>
        </select>
        {errors.timezone && (
          <p className="text-sm text-error">{errors.timezone.message}</p>
        )}
      </div>

      {/* Format de date */}
      <div className="space-y-3">
        <label className="flex items-center gap-2 text-sm font-medium text-gray-700">
          <Calendar className="w-4 h-4 text-primary" />
          Format de date
        </label>
        <select className="input" {...register('dateFormat')}>
          <option value="dd/MM/yyyy">JJ/MM/AAAA (31/12/2025)</option>
          <option value="MM/dd/yyyy">MM/JJ/AAAA (12/31/2025)</option>
          <option value="yyyy-MM-dd">AAAA-MM-JJ (2025-12-31)</option>
        </select>
        {errors.dateFormat && (
          <p className="text-sm text-error">{errors.dateFormat.message}</p>
        )}
      </div>

      <Button
        type="submit"
        variant="primary"
        isLoading={isLoading}
        disabled={!isDirty || isLoading}
        className="w-full"
      >
        Enregistrer les modifications
      </Button>
    </form>
  );
}'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Shield, Eye, Phone, Mail, BarChart } from 'lucide-react';
import { Button } from '@/components/ui';
import { privacySettingsSchema, type PrivacySettingsFormData } from '@/lib/validations';
import type { UserSettings } from '@/types';

interface PrivacySettingsFormProps {
  settings: UserSettings;
  onSubmit: (data: Partial<UserSettings>) => Promise<void>;
  isLoading?: boolean;
}

export default function PrivacySettingsForm({ 
  settings, 
  onSubmit, 
  isLoading 
}: PrivacySettingsFormProps) {
  const { register, handleSubmit, formState: { isDirty }, watch } = useForm<PrivacySettingsFormData>({
    resolver: zodResolver(privacySettingsSchema),
    defaultValues: {
      profileVisibility: settings.profileVisibility,
      showPhone: settings.showPhone,
      showEmail: settings.showEmail,
      showStats: settings.showStats,
      messagePermission: settings.messagePermission,
      showInSearchResults: settings.showInSearchResults,
      showLastSeen: settings.showLastSeen,
    },
  });

  const profileVisibility = watch('profileVisibility');

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      {/* Visibilité du profil */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
          <Shield className="w-5 h-5 text-primary" />
          Visibilité du profil
        </h3>
        
        <div className="space-y-3">
          <label className="flex items-start gap-3 p-3 border-2 border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors has-[:checked]:border-primary has-[:checked]:bg-primary/5">
            <input 
              type="radio" 
              value="public" 
              className="mt-1 w-4 h-4 text-primary" 
              {...register('profileVisibility')} 
            />
            <div>
              <p className="font-medium text-gray-900">Public</p>
              <p className="text-sm text-gray-600">Visible par tous les utilisateurs</p>
            </div>
          </label>

          <label className="flex items-start gap-3 p-3 border-2 border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors has-[:checked]:border-primary has-[:checked]:bg-primary/5">
            <input 
              type="radio" 
              value="verified_only" 
              className="mt-1 w-4 h-4 text-primary" 
              {...register('profileVisibility')} 
            />
            <div>
              <p className="font-medium text-gray-900">Utilisateurs vérifiés uniquement</p>
              <p className="text-sm text-gray-600">Visible seulement par les utilisateurs vérifiés</p>
            </div>
          </label>

          <label className="flex items-start gap-3 p-3 border-2 border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors has-[:checked]:border-primary has-[:checked]:bg-primary/5">
            <input 
              type="radio" 
              value="private" 
              className="mt-1 w-4 h-4 text-primary" 
              {...register('profileVisibility')} 
            />
            <div>
              <p className="font-medium text-gray-900">Privé</p>
              <p className="text-sm text-gray-600">Profil non visible dans les recherches</p>
            </div>
          </label>
        </div>
      </div>

      {/* Informations visibles */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
          <Eye className="w-5 h-5 text-primary" />
          Informations visibles
        </h3>
        
        <div className="space-y-2">
          <label className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <div className="flex items-center gap-2">
              <Phone className="w-4 h-4 text-gray-400" />
              <span className="text-gray-900">Afficher mon téléphone</span>
            </div>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('showPhone')} />
          </label>

          <label className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <div className="flex items-center gap-2">
              <Mail className="w-4 h-4 text-gray-400" />
              <span className="text-gray-900">Afficher mon email</span>
            </div>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('showEmail')} />
          </label>

          <label className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <div className="flex items-center gap-2">
              <BarChart className="w-4 h-4 text-gray-400" />
              <span className="text-gray-900">Afficher mes statistiques</span>
            </div>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('showStats')} />
          </label>

          <label className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <span className="text-gray-900">Afficher ma dernière connexion</span>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('showLastSeen')} />
          </label>

          <label className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
            <span className="text-gray-900">Apparaître dans les recherches</span>
            <input type="checkbox" className="w-5 h-5 text-primary" {...register('showInSearchResults')} />
          </label>
        </div>
      </div>

      {/* Permissions de messagerie */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900">Qui peut m&apos;envoyer des messages ?</h3>
        
        <div className="space-y-2">
          <label className="flex items-start gap-3 p-3 border-2 border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors has-[:checked]:border-primary has-[:checked]:bg-primary/5">
            <input 
              type="radio" 
              value="everyone" 
              className="mt-1 w-4 h-4 text-primary" 
              {...register('messagePermission')} 
            />
            <div>
              <p className="font-medium text-gray-900">Tout le monde</p>
            </div>
          </label>

          <label className="flex items-start gap-3 p-3 border-2 border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors has-[:checked]:border-primary has-[:checked]:bg-primary/5">
            <input 
              type="radio" 
              value="verified_only" 
              className="mt-1 w-4 h-4 text-primary" 
              {...register('messagePermission')} 
            />
            <div>
              <p className="font-medium text-gray-900">Utilisateurs vérifiés uniquement</p>
            </div>
          </label>

          <label className="flex items-start gap-3 p-3 border-2 border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors has-[:checked]:border-primary has-[:checked]:bg-primary/5">
            <input 
              type="radio" 
              value="no_one" 
              className="mt-1 w-4 h-4 text-primary" 
              {...register('messagePermission')} 
            />
            <div>
              <p className="font-medium text-gray-900">Personne</p>
            </div>
          </label>
        </div>
      </div>

      {profileVisibility === 'private' && (
        <div className="p-4 bg-warning/10 border border-warning/20 rounded-lg">
          <p className="text-sm text-warning-dark">
            <strong>Attention :</strong> En mode privé, votre profil ne sera pas visible dans les recherches et vous ne recevrez pas de notifications de matching.
          </p>
        </div>
      )}

      <Button
        type="submit"
        variant="primary"
        isLoading={isLoading}
        disabled={!isDirty || isLoading}
        className="w-full"
      >
        Enregistrer les modifications
      </Button>
    </form>
  );
}'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Shield, Download, Info } from 'lucide-react';
import { Button } from '@/components/ui';
import { rgpdSettingsSchema, type RgpdSettingsFormData } from '@/lib/validations';
import type { UserSettings } from '@/types';
import { formatDate } from '@/lib/utils/format';

interface RgpdSettingsFormProps {
  settings: UserSettings;
  onSubmit: (data: Partial<UserSettings>) => Promise<void>;
  onExportData: () => Promise<void>;
  isLoading?: boolean;
  isExporting?: boolean;
}

export default function RgpdSettingsForm({ 
  settings, 
  onSubmit,
  onExportData,
  isLoading,
  isExporting
}: RgpdSettingsFormProps) {
  const { register, handleSubmit, formState: { isDirty } } = useForm<RgpdSettingsFormData>({
    resolver: zodResolver(rgpdSettingsSchema),
    defaultValues: {
      cookiesConsent: settings.cookiesConsent,
      analyticsConsent: settings.analyticsConsent,
      marketingConsent: settings.marketingConsent,
      dataShareConsent: settings.dataShareConsent,
    },
  });

  return (
    <div className="space-y-6">
      {/* Info RGPD */}
      <div className="p-4 bg-info/10 border border-info/20 rounded-lg">
        <div className="flex gap-3">
          <Info className="w-5 h-5 text-info flex-shrink-0 mt-0.5" />
          <div className="space-y-2 text-sm">
            <p className="font-medium text-info-dark">Vos droits RGPD</p>
            <p className="text-gray-700">
              Conformément au RGPD, vous disposez d&apos;un droit d&apos;accès, de rectification, de suppression et de portabilité de vos données personnelles.
            </p>
          </div>
        </div>
      </div>

      {/* Consentements */}
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        <div className="space-y-4">
          <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
            <Shield className="w-5 h-5 text-primary" />
            Gestion des consentements
          </h3>

          {settings.consentDate && (
            <p className="text-sm text-gray-600">
              Dernière mise à jour : {formatDate(settings.consentDate)}
            </p>
          )}
          
          <div className="space-y-3">
            <label className="flex items-start gap-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
              <input 
                type="checkbox" 
                className="mt-1 w-5 h-5 text-primary" 
                {...register('cookiesConsent')} 
              />
              <div className="flex-1">
                <p className="font-medium text-gray-900">Cookies essentiels</p>
                <p className="text-sm text-gray-600 mt-1">
                  Nécessaires au fonctionnement du site (connexion, panier, préférences)
                </p>
              </div>
            </label>

            <label className="flex items-start gap-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
              <input 
                type="checkbox" 
                className="mt-1 w-5 h-5 text-primary" 
                {...register('analyticsConsent')} 
              />
              <div className="flex-1">
                <p className="font-medium text-gray-900">Cookies analytiques</p>
                <p className="text-sm text-gray-600 mt-1">
                  Nous aident à comprendre comment vous utilisez le site pour l&apos;améliorer
                </p>
              </div>
            </label>

            <label className="flex items-start gap-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
              <input 
                type="checkbox" 
                className="mt-1 w-5 h-5 text-primary" 
                {...register('marketingConsent')} 
              />
              <div className="flex-1">
                <p className="font-medium text-gray-900">Communications marketing</p>
                <p className="text-sm text-gray-600 mt-1">
                  Recevoir des offres et actualités personnalisées
                </p>
              </div>
            </label>

            <label className="flex items-start gap-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
              <input 
                type="checkbox" 
                className="mt-1 w-5 h-5 text-primary" 
                {...register('dataShareConsent')} 
              />
              <div className="flex-1">
                <p className="font-medium text-gray-900">Partage de données</p>
                <p className="text-sm text-gray-600 mt-1">
                  Autoriser le partage de données anonymisées avec nos partenaires
                </p>
              </div>
            </label>
          </div>
        </div>

        <Button
          type="submit"
          variant="primary"
          isLoading={isLoading}
          disabled={!isDirty || isLoading}
          className="w-full"
        >
          Enregistrer mes choix
        </Button>
      </form>

      {/* Export des données */}
      <div className="pt-6 border-t border-gray-200">
        <div className="space-y-4">
          <h3 className="text-lg font-semibold text-gray-900">Portabilité des données</h3>
          <p className="text-sm text-gray-600">
            Téléchargez toutes vos données personnelles au format JSON
          </p>
          <Button
            type="button"
            variant="outline"
            onClick={onExportData}
            isLoading={isExporting}
            leftIcon={<Download className="w-4 h-4" />}
          >
            Exporter mes données
          </Button>
        </div>
      </div>

      {/* Suppression du compte */}
      <div className="pt-6 border-t border-gray-200">
        <div className="space-y-4">
          <h3 className="text-lg font-semibold text-error">Zone dangereuse</h3>
          <p className="text-sm text-gray-600">
            La suppression de votre compte est définitive et irréversible
          </p>
          <Button
            type="button"
            variant="danger"
            onClick={() => {
              if (confirm('Êtes-vous sûr de vouloir supprimer votre compte ? Cette action est irréversible.')) {
                alert('Fonctionnalité de suppression à implémenter');
              }
            }}
          >
            Supprimer mon compte
          </Button>
        </div>
      </div>
    </div>
  );
}'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Lock, Bell, Shield, AlertTriangle } from 'lucide-react';
import { Button } from '@/components/ui';
import { securitySettingsSchema, type SecuritySettingsFormData } from '@/lib/validations';
import type { UserSettings } from '@/types';

interface SecuritySettingsFormProps {
  settings: UserSettings;
  onSubmit: (data: Partial<UserSettings>) => Promise<void>;
  isLoading?: boolean;
}

export default function SecuritySettingsForm({ 
  settings, 
  onSubmit, 
  isLoading 
}: SecuritySettingsFormProps) {
  const { register, handleSubmit, formState: { isDirty }, watch } = useForm<SecuritySettingsFormData>({
    resolver: zodResolver(securitySettingsSchema),
    defaultValues: {
      twoFactorEnabled: settings.twoFactorEnabled,
      loginNotifications: settings.loginNotifications,
    },
  });

  const twoFactorEnabled = watch('twoFactorEnabled');

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
          <Shield className="w-5 h-5 text-primary" />
          Sécurité du compte
        </h3>

        {/* Authentification à deux facteurs */}
        <div className="p-4 border border-gray-200 rounded-lg space-y-3">
          <label className="flex items-start gap-3 cursor-pointer">
            <input 
              type="checkbox" 
              className="mt-1 w-5 h-5 text-primary" 
              {...register('twoFactorEnabled')} 
            />
            <div className="flex-1">
              <div className="flex items-center gap-2">
                <Lock className="w-4 h-4 text-primary" />
                <p className="font-medium text-gray-900">Authentification à deux facteurs (2FA)</p>
              </div>
              <p className="text-sm text-gray-600 mt-1">
                Ajoutez une couche de sécurité supplémentaire en activant la vérification en deux étapes
              </p>
            </div>
          </label>

          {twoFactorEnabled && (
            <div className="ml-8 p-3 bg-primary/5 border border-primary/20 rounded-lg">
              <p className="text-sm text-primary-dark">
                <strong>Note :</strong> La 2FA sera configurée lors de votre prochaine connexion. Vous recevrez un code par SMS ou email.
              </p>
            </div>
          )}
        </div>

        {/* Notifications de connexion */}
        <div className="p-4 border border-gray-200 rounded-lg space-y-3">
          <label className="flex items-start gap-3 cursor-pointer">
            <input 
              type="checkbox" 
              className="mt-1 w-5 h-5 text-primary" 
              {...register('loginNotifications')} 
            />
            <div className="flex-1">
              <div className="flex items-center gap-2">
                <Bell className="w-4 h-4 text-primary" />
                <p className="font-medium text-gray-900">Notifications de connexion</p>
              </div>
              <p className="text-sm text-gray-600 mt-1">
                Recevez une notification lors de chaque nouvelle connexion à votre compte
              </p>
            </div>
          </label>
        </div>
      </div>

      {/* Conseils de sécurité */}
      <div className="p-4 bg-warning/10 border border-warning/20 rounded-lg">
        <div className="flex gap-3">
          <AlertTriangle className="w-5 h-5 text-warning flex-shrink-0 mt-0.5" />
          <div className="space-y-2 text-sm">
            <p className="font-medium text-warning-dark">Conseils de sécurité</p>
            <ul className="space-y-1 text-gray-700 list-disc list-inside">
              <li>Utilisez un mot de passe fort et unique</li>
              <li>Ne partagez jamais vos identifiants</li>
              <li>Vérifiez régulièrement l&apos;activité de votre compte</li>
              <li>Déconnectez-vous sur les appareils partagés</li>
            </ul>
          </div>
        </div>
      </div>

      <Button
        type="submit"
        variant="primary"
        isLoading={isLoading}
        disabled={!isDirty || isLoading}
        className="w-full"
      >
        Enregistrer les modifications
      </Button>
    </form>
  );
}