'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/components/ui';
import { createAvisSchema, type CreateAvisFormData } from '@/lib/validations';
import { StarRating } from '../avis';

interface AvisFormProps {
  cibleId: number;
  voyageId?: number;
  onSubmit: (data: CreateAvisFormData) => Promise<void>;
  onCancel?: () => void;
}

export default function AvisForm({ cibleId, voyageId, onSubmit, onCancel }: AvisFormProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const {
    register,
    handleSubmit,
    setValue,
    watch,
    formState: { errors },
  } = useForm<CreateAvisFormData>({
    resolver: zodResolver(createAvisSchema),
    defaultValues: {
      cibleId,
      voyageId,
      note: 0,
      commentaire: '',
    },
  });

  const note = watch('note');

  const handleFormSubmit = async (data: CreateAvisFormData) => {
    setIsSubmitting(true);
    try {
      await onSubmit(data);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-6">
      {/* Rating */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Note <span className="text-error">*</span>
        </label>
        <StarRating
          rating={note}
          interactive
          size="lg"
          onChange={(rating) => setValue('note', rating)}
        />
        {errors.note && (
          <p className="mt-1 text-sm text-error">{errors.note.message}</p>
        )}
      </div>

      {/* Comment */}
      <div>
        <label htmlFor="commentaire" className="block text-sm font-medium text-gray-700 mb-2">
          Commentaire
        </label>
        <textarea
          id="commentaire"
          rows={4}
          className="input"
          placeholder="Partagez votre expérience..."
          {...register('commentaire')}
        />
        {errors.commentaire && (
          <p className="mt-1 text-sm text-error">{errors.commentaire.message}</p>
        )}
      </div>

      {/* Actions */}
      <div className="flex gap-3">
        {onCancel && (
          <Button type="button" variant="outline" onClick={onCancel} className="flex-1">
            Annuler
          </Button>
        )}
        <Button type="submit" variant="primary" isLoading={isSubmitting} className="flex-1">
          Publier l&apos;avis
        </Button>
      </div>
    </form>
  );
}'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Eye, EyeOff, Lock } from 'lucide-react';
import { Button, Input } from '@/components/ui';
import { changePasswordSchema, type ChangePasswordFormData } from '@/lib/validations';

interface ChangePasswordFormProps {
  onSubmit: (data: ChangePasswordFormData) => Promise<void>;
  onCancel?: () => void;
}

export default function ChangePasswordForm({ onSubmit, onCancel }: ChangePasswordFormProps) {
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<ChangePasswordFormData>({
    resolver: zodResolver(changePasswordSchema),
  });

  const handleFormSubmit = async (data: ChangePasswordFormData) => {
    setIsSubmitting(true);
    try {
      await onSubmit(data);
      reset();
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-5">
      <Input
        label="Mot de passe actuel"
        type={showCurrentPassword ? 'text' : 'password'}
        placeholder="••••••••"
        error={errors.currentPassword?.message}
        {...register('currentPassword')}
        required
        rightIcon={
          <button
            type="button"
            onClick={() => setShowCurrentPassword(!showCurrentPassword)}
            className="hover:text-gray-700"
          >
            {showCurrentPassword ? (
              <EyeOff className="w-5 h-5" />
            ) : (
              <Eye className="w-5 h-5" />
            )}
          </button>
        }
      />

      <Input
        label="Nouveau mot de passe"
        type={showNewPassword ? 'text' : 'password'}
        placeholder="••••••••"
        error={errors.newPassword?.message}
        helperText="8 caractères min, 1 majuscule, 1 minuscule, 1 chiffre"
        {...register('newPassword')}
        required
        rightIcon={
          <button
            type="button"
            onClick={() => setShowNewPassword(!showNewPassword)}
            className="hover:text-gray-700"
          >
            {showNewPassword ? (
              <EyeOff className="w-5 h-5" />
            ) : (
              <Eye className="w-5 h-5" />
            )}
          </button>
        }
      />

      <Input
        label="Confirmer le nouveau mot de passe"
        type={showConfirmPassword ? 'text' : 'password'}
        placeholder="••••••••"
        error={errors.confirmNewPassword?.message}
        {...register('confirmNewPassword')}
        required
        rightIcon={
          <button
            type="button"
            onClick={() => setShowConfirmPassword(!showConfirmPassword)}
            className="hover:text-gray-700"
          >
            {showConfirmPassword ? (
              <EyeOff className="w-5 h-5" />
            ) : (
              <Eye className="w-5 h-5" />
            )}
          </button>
        }
      />

      <div className="flex gap-3">
        {onCancel && (
          <Button
            type="button"
            variant="outline"
            onClick={onCancel}
            disabled={isSubmitting}
            className="flex-1"
          >
            Annuler
          </Button>
        )}
        <Button
          type="submit"
          variant="primary"
          isLoading={isSubmitting}
          leftIcon={<Lock className="w-4 h-4" />}
          className="flex-1"
        >
          Changer le mot de passe
        </Button>
      </div>
    </form>
  );
}'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Package } from 'lucide-react';
import { Button, Input } from '@/components/ui';
import { createDemandeSchema, type CreateDemandeFormData } from '@/lib/validations';
import { TOUTES_VILLES } from '@/lib/utils/constants';
import type { Demande } from '@/types';

interface DemandeFormProps {
  demande?: Demande;
  onSubmit: (data: CreateDemandeFormData) => Promise<void>;
  onCancel?: () => void;
}

export default function DemandeForm({ demande, onSubmit, onCancel }: DemandeFormProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<CreateDemandeFormData>({
    resolver: zodResolver(createDemandeSchema),
    defaultValues: demande
      ? {
          villeDepart: demande.villeDepart,
          villeArrivee: demande.villeArrivee,
          dateLimite: demande.dateLimite?.split('T')[0] || '',
          poidsEstime: parseFloat(demande.poidsEstime),
          description: demande.description,
        }
      : undefined,
  });

  const handleFormSubmit = async (data: CreateDemandeFormData) => {
    setIsSubmitting(true);
    try {
      await onSubmit(data);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-5">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label htmlFor="villeDepart" className="block text-sm font-medium text-gray-700 mb-2">
            Ville de départ <span className="text-error">*</span>
          </label>
          <select id="villeDepart" className="input" {...register('villeDepart')}>
            <option value="">Sélectionnez une ville</option>
            {TOUTES_VILLES.map((ville) => (
              <option key={ville} value={ville}>
                {ville}
              </option>
            ))}
          </select>
          {errors.villeDepart && (
            <p className="mt-1 text-sm text-error">{errors.villeDepart.message}</p>
          )}
        </div>

        <div>
          <label htmlFor="villeArrivee" className="block text-sm font-medium text-gray-700 mb-2">
            Ville d&apos;arrivée <span className="text-error">*</span>
          </label>
          <select id="villeArrivee" className="input" {...register('villeArrivee')}>
            <option value="">Sélectionnez une ville</option>
            {TOUTES_VILLES.map((ville) => (
              <option key={ville} value={ville}>
                {ville}
              </option>
            ))}
          </select>
          {errors.villeArrivee && (
            <p className="mt-1 text-sm text-error">{errors.villeArrivee.message}</p>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Input
          label="Date limite (optionnel)"
          type="date"
          error={errors.dateLimite?.message}
          helperText="Date limite pour trouver un voyageur"
          {...register('dateLimite')}
        />

        <Input
          label="Poids estimé (kg)"
          type="number"
          step="0.1"
          min="0.1"
          max="50"
          placeholder="5"
          error={errors.poidsEstime?.message}
          {...register('poidsEstime', { valueAsNumber: true })}
          required
        />
      </div>

      <div>
        <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
          Description <span className="text-error">*</span>
        </label>
        <textarea
          id="description"
          rows={5}
          className="input"
          placeholder="Décrivez ce que vous souhaitez faire transporter..."
          {...register('description')}
        />
        {errors.description && (
          <p className="mt-1 text-sm text-error">{errors.description.message}</p>
        )}
        <p className="mt-1 text-xs text-gray-500">
          Minimum 10 caractères
        </p>
      </div>

      <div className="flex gap-3 pt-4">
        {onCancel && (
          <Button
            type="button"
            variant="outline"
            onClick={onCancel}
            disabled={isSubmitting}
            className="flex-1"
          >
            Annuler
          </Button>
        )}
        <Button
          type="submit"
          variant="primary"
          isLoading={isSubmitting}
          leftIcon={<Package className="w-4 h-4" />}
          className="flex-1"
        >
          {demande ? 'Modifier la demande' : 'Créer la demande'}
        </Button>
      </div>
    </form>
  );
}/**
 * Export centralisé de tous les formulaires
 */

// Auth forms
export { default as LoginForm } from './LoginForm';
export { default as RegisterForm } from './RegisterForm';
export { default as ChangePasswordForm } from './ChangePasswordForm';

// User forms
export { default as ProfileForm } from './ProfileForm';

// Voyage forms
export { default as VoyageForm } from './VoyageForm';

// Demande forms
export { default as DemandeForm } from './DemandeForm';'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Eye, EyeOff, LogIn } from 'lucide-react';
import Link from 'next/link';
import { Button, Input } from '@/components/ui';
import { loginSchema, type LoginFormData } from '@/lib/validations';
import { ROUTES } from '@/lib/utils/constants';

interface LoginFormProps {
  onSubmit: (data: LoginFormData) => Promise<void>;
}

export default function LoginForm({ onSubmit }: LoginFormProps) {
  const [showPassword, setShowPassword] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
  });

  const handleFormSubmit = async (data: LoginFormData) => {
    setIsSubmitting(true);
    try {
      await onSubmit(data);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-5">
      <Input
        label="Email"
        type="email"
        placeholder="exemple@email.com"
        error={errors.email?.message}
        {...register('email')}
        required
      />

      <div>
        <Input
          label="Mot de passe"
          type={showPassword ? 'text' : 'password'}
          placeholder="••••••••"
          error={errors.password?.message}
          {...register('password')}
          required
          rightIcon={
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="hover:text-gray-700"
            >
              {showPassword ? (
                <EyeOff className="w-5 h-5" />
              ) : (
                <Eye className="w-5 h-5" />
              )}
            </button>
          }
        />
        <div className="mt-2 text-right">
          <Link
            href={ROUTES.FORGOT_PASSWORD}
            className="text-sm text-primary hover:text-primary-dark transition-colors"
          >
            Mot de passe oublié ?
          </Link>
        </div>
      </div>

      <Button
        type="submit"
        variant="primary"
        isLoading={isSubmitting}
        leftIcon={<LogIn className="w-4 h-4" />}
        className="w-full"
      >
        Se connecter
      </Button>

      <p className="text-center text-sm text-gray-600">
        Pas encore de compte ?{' '}
        <Link
          href={ROUTES.REGISTER}
          className="text-primary font-medium hover:text-primary-dark transition-colors"
        >
          S&apos;inscrire
        </Link>
      </p>
    </form>
  );
}'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Save, Camera } from 'lucide-react';
import { Button, Input, Avatar } from '@/components/ui';
import { updateUserSchema, type UpdateUserFormData } from '@/lib/validations';
import type { User } from '@/types';

interface ProfileFormProps {
  user: User;
  onSubmit: (data: UpdateUserFormData) => Promise<void>;
  onCancel?: () => void;
}

export default function ProfileForm({ user, onSubmit, onCancel }: ProfileFormProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [photoPreview, setPhotoPreview] = useState(user.photo || '');

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<UpdateUserFormData>({
    resolver: zodResolver(updateUserSchema),
    defaultValues: {
      nom: user.nom,
      prenom: user.prenom,
      telephone: user.telephone || '',
      bio: user.bio || '',
      photo: user.photo || '',
    },
  });

  const handleFormSubmit = async (data: UpdateUserFormData) => {
    setIsSubmitting(true);
    try {
      await onSubmit(data);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-6">
      {/* Photo de profil */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-3">
          Photo de profil
        </label>
        <div className="flex items-center gap-4">
          <Avatar
            src={photoPreview || undefined}
            fallback={`${user.nom} ${user.prenom}`}
            size="xl"
          />
          <div className="flex-1">
            <Input
              type="url"
              placeholder="https://exemple.com/photo.jpg"
              error={errors.photo?.message}
              helperText="URL de votre photo de profil"
              {...register('photo')}
              onChange={(e) => {
                register('photo').onChange(e);
                setPhotoPreview(e.target.value);
              }}
              leftIcon={<Camera className="w-5 h-5" />}
            />
          </div>
        </div>
      </div>

      {/* Informations personnelles */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Input
          label="Prénom"
          type="text"
          placeholder="Jean"
          error={errors.prenom?.message}
          {...register('prenom')}
        />

        <Input
          label="Nom"
          type="text"
          placeholder="Dupont"
          error={errors.nom?.message}
          {...register('nom')}
        />
      </div>

      <Input
        label="Téléphone"
        type="tel"
        placeholder="+237 6XX XX XX XX"
        error={errors.telephone?.message}
        helperText="Format: +237XXXXXXXXX"
        {...register('telephone')}
      />

      {/* Bio */}
      <div>
        <label htmlFor="bio" className="block text-sm font-medium text-gray-700 mb-2">
          Bio
        </label>
        <textarea
          id="bio"
          rows={4}
          className="input"
          placeholder="Parlez un peu de vous..."
          {...register('bio')}
        />
        {errors.bio && (
          <p className="mt-1 text-sm text-error">{errors.bio.message}</p>
        )}
        <p className="mt-1 text-xs text-gray-500">
          Maximum 500 caractères
        </p>
      </div>

      {/* Actions */}
      <div className="flex gap-3 pt-4 border-t border-gray-200">
        {onCancel && (
          <Button
            type="button"
            variant="outline"
            onClick={onCancel}
            disabled={isSubmitting}
            className="flex-1"
          >
            Annuler
          </Button>
        )}
        <Button
          type="submit"
          variant="primary"
          isLoading={isSubmitting}
          leftIcon={<Save className="w-4 h-4" />}
          className="flex-1"
        >
          Enregistrer
        </Button>
      </div>
    </form>
  );
}'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Eye, EyeOff, UserPlus } from 'lucide-react';
import Link from 'next/link';
import { Button, Input } from '@/components/ui';
import { registerSchema, type RegisterFormData } from '@/lib/validations';
import { ROUTES } from '@/lib/utils/constants';

interface RegisterFormProps {
  onSubmit: (data: RegisterFormData) => Promise<void>;
}

export default function RegisterForm({ onSubmit }: RegisterFormProps) {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<RegisterFormData>({
    resolver: zodResolver(registerSchema),
  });

  const handleFormSubmit = async (data: RegisterFormData) => {
    setIsSubmitting(true);
    try {
      await onSubmit(data);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-5">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Input
          label="Prénom"
          type="text"
          placeholder="Jean"
          error={errors.prenom?.message}
          {...register('prenom')}
          required
        />

        <Input
          label="Nom"
          type="text"
          placeholder="Dupont"
          error={errors.nom?.message}
          {...register('nom')}
          required
        />
      </div>

      <Input
        label="Email"
        type="email"
        placeholder="exemple@email.com"
        error={errors.email?.message}
        {...register('email')}
        required
      />

      <Input
        label="Téléphone"
        type="tel"
        placeholder="+237 6XX XX XX XX"
        error={errors.telephone?.message}
        helperText="Format: +237XXXXXXXXX"
        {...register('telephone')}
        required
      />

      <Input
        label="Mot de passe"
        type={showPassword ? 'text' : 'password'}
        placeholder="••••••••"
        error={errors.password?.message}
        helperText="8 caractères min, 1 majuscule, 1 minuscule, 1 chiffre"
        {...register('password')}
        required
        rightIcon={
          <button
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="hover:text-gray-700"
          >
            {showPassword ? (
              <EyeOff className="w-5 h-5" />
            ) : (
              <Eye className="w-5 h-5" />
            )}
          </button>
        }
      />

      <Input
        label="Confirmer le mot de passe"
        type={showConfirmPassword ? 'text' : 'password'}
        placeholder="••••••••"
        error={errors.confirmPassword?.message}
        {...register('confirmPassword')}
        required
        rightIcon={
          <button
            type="button"
            onClick={() => setShowConfirmPassword(!showConfirmPassword)}
            className="hover:text-gray-700"
          >
            {showConfirmPassword ? (
              <EyeOff className="w-5 h-5" />
            ) : (
              <Eye className="w-5 h-5" />
            )}
          </button>
        }
      />

      <Button
        type="submit"
        variant="primary"
        isLoading={isSubmitting}
        leftIcon={<UserPlus className="w-4 h-4" />}
        className="w-full"
      >
        S&apos;inscrire
      </Button>

      <p className="text-center text-sm text-gray-600">
        Déjà un compte ?{' '}
        <Link
          href={ROUTES.LOGIN}
          className="text-primary font-medium hover:text-primary-dark transition-colors"
        >
          Se connecter
        </Link>
      </p>
    </form>
  );
}'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { AlertCircle } from 'lucide-react';
import { Button, Modal } from '@/components/ui';
import { createSignalementSchema, type CreateSignalementFormData } from '@/lib/validations';
import { SIGNALEMENT_MOTIFS } from '@/lib/utils/constants';

interface SignalementFormProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: CreateSignalementFormData) => Promise<void>;
  voyageId?: number;
  demandeId?: number;
}

export default function SignalementForm({
  isOpen,
  onClose,
  onSubmit,
  voyageId,
  demandeId,
}: SignalementFormProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<CreateSignalementFormData>({
    resolver: zodResolver(createSignalementSchema),
    defaultValues: {
      voyageId,
      demandeId,
      motif: 'contenu_inapproprie',
      description: '',
    },
  });

  const handleFormSubmit = async (data: CreateSignalementFormData) => {
    setIsSubmitting(true);
    try {
      await onSubmit(data);
      reset();
      onClose();
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Signaler un problème" size="md">
      <form onSubmit={handleSubmit(handleFormSubmit)} className="p-6 space-y-5">
        <div className="flex items-start gap-3 p-4 bg-warning/10 rounded-lg">
          <AlertCircle className="w-5 h-5 text-warning flex-shrink-0 mt-0.5" />
          <p className="text-sm text-gray-700">
            Signalez uniquement les contenus qui violent nos conditions d&apos;utilisation.
            Les signalements abusifs peuvent entraîner des sanctions.
          </p>
        </div>

        {/* Motif */}
        <div>
          <label htmlFor="motif" className="block text-sm font-medium text-gray-700 mb-2">
            Motif du signalement <span className="text-error">*</span>
          </label>
          <select
            id="motif"
            className="input"
            {...register('motif')}
          >
            {SIGNALEMENT_MOTIFS.map((motif) => (
              <option key={motif.value} value={motif.value}>
                {motif.label}
              </option>
            ))}
          </select>
          {errors.motif && (
            <p className="mt-1 text-sm text-error">{errors.motif.message}</p>
          )}
        </div>

        {/* Description */}
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
            Description détaillée <span className="text-error">*</span>
          </label>
          <textarea
            id="description"
            rows={5}
            className="input"
            placeholder="Expliquez en détail le problème rencontré..."
            {...register('description')}
          />
          {errors.description && (
            <p className="mt-1 text-sm text-error">{errors.description.message}</p>
          )}
          <p className="mt-1 text-xs text-gray-500">
            Minimum 20 caractères
          </p>
        </div>

        {/* Actions */}
        <div className="flex gap-3 pt-4">
          <Button
            type="button"
            variant="outline"
            onClick={onClose}
            disabled={isSubmitting}
            className="flex-1"
          >
            Annuler
          </Button>
          <Button
            type="submit"
            variant="danger"
            isLoading={isSubmitting}
            className="flex-1"
          >
            Envoyer le signalement
          </Button>
        </div>
      </form>
    </Modal>
  );
}'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Plane } from 'lucide-react';
import { Button, Input } from '@/components/ui';
import { createVoyageSchema, type CreateVoyageFormData } from '@/lib/validations';
import { TOUTES_VILLES } from '@/lib/utils/constants';
import type { Voyage } from '@/types';

interface VoyageFormProps {
  voyage?: Voyage;
  onSubmit: (data: CreateVoyageFormData) => Promise<void>;
  onCancel?: () => void;
}

export default function VoyageForm({ voyage, onSubmit, onCancel }: VoyageFormProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<CreateVoyageFormData>({
    resolver: zodResolver(createVoyageSchema),
    defaultValues: voyage
      ? {
          villeDepart: voyage.villeDepart,
          villeArrivee: voyage.villeArrivee,
          dateDepart: voyage.dateDepart.split('T')[0],
          dateArrivee: voyage.dateArrivee.split('T')[0],
          poidsDisponible: parseFloat(voyage.poidsDisponible),
          description: voyage.description || '',
        }
      : undefined,
  });

  const handleFormSubmit = async (data: CreateVoyageFormData) => {
    setIsSubmitting(true);
    try {
      await onSubmit(data);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-5">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label htmlFor="villeDepart" className="block text-sm font-medium text-gray-700 mb-2">
            Ville de départ <span className="text-error">*</span>
          </label>
          <select id="villeDepart" className="input" {...register('villeDepart')}>
            <option value="">Sélectionnez une ville</option>
            {TOUTES_VILLES.map((ville) => (
              <option key={ville} value={ville}>
                {ville}
              </option>
            ))}
          </select>
          {errors.villeDepart && (
            <p className="mt-1 text-sm text-error">{errors.villeDepart.message}</p>
          )}
        </div>

        <div>
          <label htmlFor="villeArrivee" className="block text-sm font-medium text-gray-700 mb-2">
            Ville d&apos;arrivée <span className="text-error">*</span>
          </label>
          <select id="villeArrivee" className="input" {...register('villeArrivee')}>
            <option value="">Sélectionnez une ville</option>
            {TOUTES_VILLES.map((ville) => (
              <option key={ville} value={ville}>
                {ville}
              </option>
            ))}
          </select>
          {errors.villeArrivee && (
            <p className="mt-1 text-sm text-error">{errors.villeArrivee.message}</p>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Input
          label="Date de départ"
          type="date"
          error={errors.dateDepart?.message}
          {...register('dateDepart')}
          required
        />

        <Input
          label="Date d'arrivée"
          type="date"
          error={errors.dateArrivee?.message}
          {...register('dateArrivee')}
          required
        />
      </div>

      <Input
        label="Poids disponible (kg)"
        type="number"
        step="0.1"
        min="1"
        max="100"
        placeholder="15"
        error={errors.poidsDisponible?.message}
        helperText="Poids maximum que vous pouvez transporter"
        {...register('poidsDisponible', { valueAsNumber: true })}
        required
      />

      <div>
        <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
          Description
        </label>
        <textarea
          id="description"
          rows={4}
          className="input"
          placeholder="Informations supplémentaires sur votre voyage..."
          {...register('description')}
        />
        {errors.description && (
          <p className="mt-1 text-sm text-error">{errors.description.message}</p>
        )}
      </div>

      <div className="flex gap-3 pt-4">
        {onCancel && (
          <Button
            type="button"
            variant="outline"
            onClick={onCancel}
            disabled={isSubmitting}
            className="flex-1"
          >
            Annuler
          </Button>
        )}
        <Button
          type="submit"
          variant="primary"
          isLoading={isSubmitting}
          leftIcon={<Plane className="w-4 h-4" />}
          className="flex-1"
        >
          {voyage ? 'Modifier le voyage' : 'Créer le voyage'}
        </Button>
      </div>
    </form>
  );
}