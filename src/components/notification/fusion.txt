export { default as NotificationBell } from './NotificationBell';
export { default as NotificationItem } from './NotificationItem';
export { default as NotificationList } from './NotificationList';'use client';

import { motion, AnimatePresence } from 'framer-motion';
import { Bell } from 'lucide-react';
import Link from 'next/link';
import { ROUTES } from '@/lib/utils/constants';

interface NotificationBellProps {
  count: number;
  onClick?: () => void;
  asLink?: boolean;
}

export default function NotificationBell({ count, onClick, asLink = true }: NotificationBellProps) {
  const hasNotifications = count > 0;

  const BellButton = (
    <button
      onClick={onClick}
      className="relative p-2 rounded-lg hover:bg-gray-100 transition-colors"
      aria-label={`${count} notifications non lues`}
    >
      <Bell className="w-6 h-6 text-gray-700" />
      <AnimatePresence>
        {hasNotifications && (
          <motion.span
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            exit={{ scale: 0 }}
            className="absolute -top-1 -right-1 w-5 h-5 bg-error text-white text-xs rounded-full flex items-center justify-center font-medium"
          >
            {count > 9 ? '9+' : count}
          </motion.span>
        )}
      </AnimatePresence>
    </button>
  );

  if (asLink) {
    return <Link href={ROUTES.NOTIFICATIONS}>{BellButton}</Link>;
  }

  return BellButton;
}'use client';

import { motion } from 'framer-motion';
import { MessageCircle, Star, Package, FileText, X } from 'lucide-react';
import { formatDateRelative } from '@/lib/utils/format';
import { cn } from '@/lib/utils/cn';
import type { Notification, NotificationType } from '@/types';

interface NotificationItemProps {
  notification: Notification;
  onClick?: () => void;
  onDismiss?: () => void;
}

const notificationIcons: Record<NotificationType, React.ReactNode> = {
  matching_voyage: <Package className="w-5 h-5" />,
  matching_demande: <FileText className="w-5 h-5" />,
  new_message: <MessageCircle className="w-5 h-5" />,
  avis_recu: <Star className="w-5 h-5" />,
  voyage_statut: <Package className="w-5 h-5" />,
  demande_statut: <FileText className="w-5 h-5" />,
};

const notificationColors: Record<NotificationType, string> = {
  matching_voyage: 'bg-primary/10 text-primary',
  matching_demande: 'bg-secondary/10 text-secondary',
  new_message: 'bg-info/10 text-info',
  avis_recu: 'bg-warning/10 text-warning',
  voyage_statut: 'bg-primary/10 text-primary',
  demande_statut: 'bg-secondary/10 text-secondary',
};

export default function NotificationItem({ notification, onClick, onDismiss }: NotificationItemProps) {
  return (
    <motion.div
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: 20 }}
      className={cn(
        'p-4 flex items-start gap-3 rounded-lg transition-colors cursor-pointer',
        !notification.lue ? 'bg-primary/5 hover:bg-primary/10' : 'hover:bg-gray-50'
      )}
      onClick={onClick}
    >
      {/* Icon */}
      <div className={cn('w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0', notificationColors[notification.type])}>
        {notificationIcons[notification.type]}
      </div>

      {/* Content */}
      <div className="flex-1 min-w-0">
        <div className="flex items-start justify-between gap-2">
          <div>
            <p className={cn('text-sm font-medium', !notification.lue && 'text-gray-900')}>
              {notification.titre}
            </p>
            <p className="text-sm text-gray-600 mt-0.5">{notification.message}</p>
          </div>
          {!notification.lue && (
            <span className="w-2 h-2 bg-primary rounded-full flex-shrink-0 mt-1" />
          )}
        </div>
        <p className="text-xs text-gray-500 mt-1">
          {formatDateRelative(notification.createdAt)}
        </p>
      </div>

      {/* Dismiss Button */}
      {onDismiss && (
        <button
          onClick={(e) => {
            e.stopPropagation();
            onDismiss();
          }}
          className="p-1 hover:bg-gray-200 rounded transition-colors flex-shrink-0"
          aria-label="Supprimer"
        >
          <X className="w-4 h-4 text-gray-400" />
        </button>
      )}
    </motion.div>
  );
}'use client';

import { motion, AnimatePresence } from 'framer-motion';
import NotificationItem from './NotificationItem';
import { Button } from '@/components/ui';
import type { Notification } from '@/types';

interface NotificationListProps {
  notifications: Notification[];
  onNotificationClick?: (notification: Notification) => void;
  onDismiss?: (id: number) => void;
  onMarkAllAsRead?: () => void;
  isLoading?: boolean;
}

export default function NotificationList({
  notifications,
  onNotificationClick,
  onDismiss,
  onMarkAllAsRead,
  isLoading = false,
}: NotificationListProps) {
  const hasUnread = notifications.some((n) => !n.lue);

  if (isLoading) {
    return (
      <div className="space-y-3">
        {[...Array(5)].map((_, i) => (
          <div key={i} className="p-4 rounded-lg animate-pulse flex items-start gap-3">
            <div className="w-10 h-10 bg-gray-200 rounded-lg flex-shrink-0" />
            <div className="flex-1 space-y-2">
              <div className="h-4 bg-gray-200 rounded w-3/4" />
              <div className="h-3 bg-gray-200 rounded w-full" />
              <div className="h-3 bg-gray-200 rounded w-1/4" />
            </div>
          </div>
        ))}
      </div>
    );
  }

  if (notifications.length === 0) {
    return (
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        className="text-center py-12"
      >
        <div className="w-20 h-20 mx-auto mb-4 rounded-full bg-gray-100 flex items-center justify-center">
          <svg className="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
          </svg>
        </div>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          Aucune notification
        </h3>
        <p className="text-gray-600">
          Vous êtes à jour ! Revenez plus tard.
        </p>
      </motion.div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Header Actions */}
      {hasUnread && onMarkAllAsRead && (
        <div className="flex justify-end">
          <Button variant="ghost" size="sm" onClick={onMarkAllAsRead}>
            Tout marquer comme lu
          </Button>
        </div>
      )}

      {/* List */}
      <AnimatePresence mode="popLayout">
        <div className="space-y-2">
          {notifications.map((notification) => (
            <NotificationItem
              key={notification.id}
              notification={notification}
              onClick={() => onNotificationClick?.(notification)}
              onDismiss={onDismiss ? () => onDismiss(notification.id) : undefined}
            />
          ))}
        </div>
      </AnimatePresence>
    </div>
  );
}