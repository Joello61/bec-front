'use client';

import { motion } from 'framer-motion';
import Link from 'next/link';
import { Avatar, Card, CardContent } from '@/components/ui';
import StarRating from './StarRating';
import { formatDateRelative } from '@/lib/utils/format';
import { ROUTES } from '@/lib/utils/constants';
import type { Avis } from '@/types';

interface AvisCardProps {
  avis: Avis;
}

export default function AvisCard({ avis }: AvisCardProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <Card>
        <CardContent className="p-5">
          {/* Header */}
          <div className="flex items-start justify-between mb-3">
            <Link
              href={ROUTES.USER_PROFILE(avis.auteur.id)}
              className="flex items-center gap-3 group"
            >
              <Avatar
                src={avis.auteur.photo || undefined}
                fallback={`${avis.auteur.nom} ${avis.auteur.prenom}`}
                size="md"
                verified={avis.auteur.emailVerifie}
              />
              <div>
                <p className="font-medium text-gray-900 group-hover:text-primary transition-colors">
                  {avis.auteur.prenom} {avis.auteur.nom}
                </p>
                <p className="text-sm text-gray-500">
                  {formatDateRelative(avis.createdAt)}
                </p>
              </div>
            </Link>

            <StarRating rating={avis.note} size="sm" />
          </div>

          {/* Comment */}
          {avis.commentaire && (
            <p className="text-gray-700 mt-3">{avis.commentaire}</p>
          )}

          {/* Voyage Link */}
          {avis.voyage && (
            <Link
              href={ROUTES.VOYAGE_DETAILS(avis.voyage.id)}
              className="mt-3 inline-flex items-center text-sm text-primary hover:text-primary-dark transition-colors"
            >
              Voir le voyage →
            </Link>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
}'use client';

import { motion } from 'framer-motion';
import { Star } from 'lucide-react';
import type { AvisStats as AvisStatsType } from '@/types';

interface AvisStatsProps {
  stats: AvisStatsType;
}

export default function AvisStats({ stats }: AvisStatsProps) {
  const ratings = [5, 4, 3, 2, 1];

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-4"
    >
      {/* Average */}
      <div className="text-center pb-4 border-b border-gray-200">
        <div className="flex items-center justify-center gap-2 mb-2">
          <span className="text-4xl font-bold text-gray-900">
            {stats.average.toFixed(1)}
          </span>
          <Star className="w-8 h-8 fill-warning text-warning" />
        </div>
        <p className="text-sm text-gray-600">
          Basé sur {stats.total} avis
        </p>
      </div>

      {/* Distribution */}
      <div className="space-y-2">
        {ratings.map((rating) => {
          const count = stats.distribution[rating as keyof typeof stats.distribution] || 0;
          const percentage = stats.total > 0 ? (count / stats.total) * 100 : 0;

          return (
            <div key={rating} className="flex items-center gap-3">
              <div className="flex items-center gap-1 w-16">
                <span className="text-sm font-medium text-gray-700">{rating}</span>
                <Star className="w-3.5 h-3.5 fill-warning text-warning" />
              </div>

              <div className="flex-1 h-2 bg-gray-200 rounded-full overflow-hidden">
                <motion.div
                  initial={{ width: 0 }}
                  animate={{ width: `${percentage}%` }}
                  transition={{ duration: 0.5, delay: (5 - rating) * 0.1 }}
                  className="h-full bg-warning"
                />
              </div>

              <span className="text-sm text-gray-600 w-12 text-right">
                {count}
              </span>
            </div>
          );
        })}
      </div>
    </motion.div>
  );
}export { default as StarRating } from './StarRating';
export { default as AvisStats } from './AvisStats';
export { default as AvisCard } from './AvisCard';'use client';

import { Star } from 'lucide-react';
import { cn } from '@/lib/utils/cn';

interface StarRatingProps {
  rating: number;
  maxRating?: number;
  size?: 'sm' | 'md' | 'lg';
  interactive?: boolean;
  onChange?: (rating: number) => void;
}

export default function StarRating({
  rating,
  maxRating = 5,
  size = 'md',
  interactive = false,
  onChange,
}: StarRatingProps) {
  const sizes = {
    sm: 'w-4 h-4',
    md: 'w-5 h-5',
    lg: 'w-6 h-6',
  };

  return (
    <div className="flex items-center gap-1">
      {[...Array(maxRating)].map((_, index) => {
        const starValue = index + 1;
        const isFilled = starValue <= rating;

        return (
          <button
            key={index}
            type="button"
            onClick={() => interactive && onChange?.(starValue)}
            disabled={!interactive}
            className={cn(
              'transition-colors',
              interactive && 'hover:scale-110 cursor-pointer',
              !interactive && 'cursor-default'
            )}
            aria-label={`${starValue} étoile${starValue > 1 ? 's' : ''}`}
          >
            <Star
              className={cn(
                sizes[size],
                isFilled ? 'fill-warning text-warning' : 'text-gray-300'
              )}
            />
          </button>
        );
      })}
    </div>
  );
}