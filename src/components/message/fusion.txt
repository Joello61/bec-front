'use client';

import { useEffect, useRef } from 'react';
import { motion } from 'framer-motion';
import { ArrowLeft } from 'lucide-react';
import { Avatar } from '@/components/ui';
import MessageBubble from './MessageBubble';
import MessageInput from './MessageInput';
import type { Message, User } from '@/types';

interface ChatBoxProps {
  messages: Message[];
  recipient: User;
  currentUserId: number;
  onSendMessage: (content: string) => void;
  onBack?: () => void;
  isLoading?: boolean;
}

export default function ChatBox({
  messages,
  recipient,
  currentUserId,
  onSendMessage,
  onBack,
  isLoading = false,
}: ChatBoxProps) {
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  return (
    <div className="flex flex-col h-full bg-white">
      {/* Header */}
      <div className="flex items-center gap-3 p-4 border-b border-gray-200 bg-white">
        {onBack && (
          <button
            onClick={onBack}
            className="lg:hidden p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
        )}
        <Avatar
          src={recipient.photo || undefined}
          fallback={`${recipient.nom} ${recipient.prenom}`}
          size="md"
          verified={recipient.emailVerifie}
        />
        <div className="flex-1 min-w-0">
          <p className="font-semibold text-gray-900">
            {recipient.prenom} {recipient.nom}
          </p>
          {recipient.bio && (
            <p className="text-sm text-gray-600 truncate">{recipient.bio}</p>
          )}
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.length === 0 ? (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="flex flex-col items-center justify-center h-full text-center py-12"
          >
            <div className="w-16 h-16 mb-4 rounded-full bg-gray-100 flex items-center justify-center">
              <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
              </svg>
            </div>
            <p className="text-gray-600">
              Commencez la conversation en envoyant un message
            </p>
          </motion.div>
        ) : (
          <>
            {messages.map((message, index) => {
              const isOwn = message.expediteur.id === currentUserId;
              const prevMessage = messages[index - 1];
              const showAvatar =
                !prevMessage || prevMessage.expediteur.id !== message.expediteur.id;

              return (
                <MessageBubble
                  key={message.id}
                  message={message}
                  isOwn={isOwn}
                  showAvatar={showAvatar}
                />
              );
            })}
            <div ref={messagesEndRef} />
          </>
        )}
      </div>

      {/* Input */}
      <MessageInput onSend={onSendMessage} isLoading={isLoading} />
    </div>
  );
}'use client';

import { motion } from 'framer-motion';
import { Avatar, Badge } from '@/components/ui';
import { formatDateRelative, truncate } from '@/lib/utils/format';
import { cn } from '@/lib/utils/cn';
import type { Conversation } from '@/types';

interface ConversationItemProps {
  conversation: Conversation;
  isActive?: boolean;
  onClick: () => void;
}

export default function ConversationItem({ 
  conversation, 
  isActive = false,
  onClick 
}: ConversationItemProps) {
  const isUnread = !conversation.lastMessage.lu && 
    conversation.lastMessage.destinataire.id !== conversation.user.id;

  return (
    <motion.button
      whileHover={{ scale: 1.01 }}
      whileTap={{ scale: 0.99 }}
      onClick={onClick}
      className={cn(
        'w-full p-4 flex items-start gap-3 rounded-lg text-left transition-colors',
        isActive ? 'bg-primary/10' : 'hover:bg-gray-50',
        isUnread && 'bg-primary/5'
      )}
    >
      <Avatar
        src={conversation.user.photo || undefined}
        fallback={`${conversation.user.nom} ${conversation.user.prenom}`}
        size="md"
        verified={conversation.user.emailVerifie}
      />

      <div className="flex-1 min-w-0">
        <div className="flex items-start justify-between gap-2 mb-1">
          <p className={cn(
            'font-medium truncate',
            isUnread ? 'text-gray-900' : 'text-gray-700'
          )}>
            {conversation.user.prenom} {conversation.user.nom}
          </p>
          <span className="text-xs text-gray-500 flex-shrink-0">
            {formatDateRelative(conversation.lastMessage.createdAt)}
          </span>
        </div>

        <div className="flex items-center gap-2">
          <p className={cn(
            'text-sm truncate flex-1',
            isUnread ? 'text-gray-900 font-medium' : 'text-gray-600'
          )}>
            {truncate(conversation.lastMessage.contenu, 50)}
          </p>
          {isUnread && (
            <Badge variant="default" size="sm">
              New
            </Badge>
          )}
        </div>
      </div>
    </motion.button>
  );
}'use client';

import { motion } from 'framer-motion';
import ConversationItem from './ConversationItem';
import type { Conversation } from '@/types';

interface ConversationListProps {
  conversations: Conversation[];
  activeUserId?: number;
  onConversationClick: (userId: number) => void;
  isLoading?: boolean;
}

export default function ConversationList({
  conversations,
  activeUserId,
  onConversationClick,
  isLoading = false,
}: ConversationListProps) {
  if (isLoading) {
    return (
      <div className="divide-y divide-gray-200">
        {[...Array(5)].map((_, i) => (
          <div key={i} className="p-4 animate-pulse">
            <div className="flex items-start gap-3">
              <div className="w-10 h-10 bg-gray-200 rounded-full flex-shrink-0" />
              <div className="flex-1 space-y-2">
                <div className="h-4 bg-gray-200 rounded w-3/4" />
                <div className="h-3 bg-gray-200 rounded w-full" />
              </div>
            </div>
          </div>
        ))}
      </div>
    );
  }

  if (conversations.length === 0) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="flex flex-col items-center justify-center py-12 px-4"
      >
        <div className="w-16 h-16 mb-4 rounded-full bg-gray-100 flex items-center justify-center">
          <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
          </svg>
        </div>
        <h3 className="text-base font-medium text-gray-900 mb-1">
          Aucune conversation
        </h3>
        <p className="text-sm text-gray-600 text-center">
          Commencez à échanger avec des voyageurs ou des clients
        </p>
      </motion.div>
    );
  }

  return (
    <div className="divide-y divide-gray-200">
      {conversations.map((conversation) => (
        <ConversationItem
          key={conversation.user.id}
          conversation={conversation}
          isActive={activeUserId === conversation.user.id}
          onClick={() => onConversationClick(conversation.user.id)}
        />
      ))}
    </div>
  );
}export { default as MessageBubble } from './MessageBubble';
export { default as MessageInput } from './MessageInput';
export { default as ConversationItem } from './ConversationItem';
export { default as ConversationList } from './ConversationList';
export { default as ChatBox } from './ChatBox';'use client';

import { motion } from 'framer-motion';
import { Check, CheckCheck } from 'lucide-react';
import { Avatar } from '@/components/ui';
import { formatDateRelative } from '@/lib/utils/format';
import { cn } from '@/lib/utils/cn';
import type { Message } from '@/types';

interface MessageBubbleProps {
  message: Message;
  isOwn: boolean;
  showAvatar?: boolean;
}

export default function MessageBubble({ message, isOwn, showAvatar = true }: MessageBubbleProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.2 }}
      className={cn(
        'flex gap-3',
        isOwn ? 'flex-row-reverse' : 'flex-row'
      )}
    >
      {/* Avatar */}
      {showAvatar && !isOwn && (
        <Avatar
          src={message.expediteur.photo || undefined}
          fallback={`${message.expediteur.nom} ${message.expediteur.prenom}`}
          size="sm"
        />
      )}

      {/* Message Content */}
      <div className={cn('flex flex-col max-w-[70%]', isOwn && 'items-end')}>
        <div
          className={cn(
            'px-4 py-2.5 rounded-2xl',
            isOwn
              ? 'bg-primary text-white rounded-br-sm'
              : 'bg-gray-100 text-gray-900 rounded-bl-sm'
          )}
        >
          <p className="text-sm whitespace-pre-wrap break-words">{message.contenu}</p>
        </div>

        {/* Meta Info */}
        <div className={cn('flex items-center gap-1 mt-1 px-2', isOwn && 'flex-row-reverse')}>
          <span className="text-xs text-gray-500">
            {formatDateRelative(message.createdAt)}
          </span>
          {isOwn && (
            <span className="text-primary">
              {message.lu ? (
                <CheckCheck className="w-3.5 h-3.5" />
              ) : (
                <Check className="w-3.5 h-3.5" />
              )}
            </span>
          )}
        </div>
      </div>
    </motion.div>
  );
}'use client';

import { useState, KeyboardEvent } from 'react';
import { Send } from 'lucide-react';
import { Button } from '@/components/ui';

interface MessageInputProps {
  onSend: (content: string) => void;
  isLoading?: boolean;
  placeholder?: string;
}

export default function MessageInput({ 
  onSend, 
  isLoading = false,
  placeholder = 'Écrivez votre message...' 
}: MessageInputProps) {
  const [message, setMessage] = useState('');

  const handleSend = () => {
    const trimmedMessage = message.trim();
    if (!trimmedMessage || isLoading) return;

    onSend(trimmedMessage);
    setMessage('');
  };

  const handleKeyPress = (e: KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  return (
    <div className="border-t border-gray-200 p-4 bg-white">
      <div className="flex items-end gap-3">
        <textarea
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          onKeyDown={handleKeyPress}
          placeholder={placeholder}
          rows={1}
          className="flex-1 resize-none px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-shadow max-h-32"
          style={{
            height: 'auto',
            minHeight: '44px',
          }}
          onInput={(e) => {
            const target = e.target as HTMLTextAreaElement;
            target.style.height = 'auto';
            target.style.height = `${target.scrollHeight}px`;
          }}
        />
        <Button
          variant="primary"
          onClick={handleSend}
          disabled={!message.trim() || isLoading}
          isLoading={isLoading}
          className="flex-shrink-0"
        >
          <Send className="w-4 h-4" />
        </Button>
      </div>
      <p className="text-xs text-gray-500 mt-2">
        Appuyez sur Entrée pour envoyer, Shift + Entrée pour un retour à la ligne
      </p>
    </div>
  );
}