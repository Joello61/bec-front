import apiClient from './client';
import { endpoints } from './endpoints';
import type { 
  LoginInput, 
  RegisterInput, 
  User,
  LoginResponse,
  RegisterResponse,
} from '@/types';

export const authApi = {
  async login(data: LoginInput): Promise<LoginResponse> {
    const response = await apiClient.post<LoginResponse>(endpoints.auth.login, data);
    return response.data;
  },

  async register(data: RegisterInput): Promise<RegisterResponse> {
    const response = await apiClient.post<RegisterResponse>(endpoints.auth.register, data);
    return response.data;
  },

  async logout(): Promise<void> {
    await apiClient.post(endpoints.auth.logout);
  },

  async me(): Promise<User> {
    const response = await apiClient.get<User>(endpoints.auth.me);
    return response.data;
  },
};import apiClient from './client';
import { endpoints } from './endpoints';
import type { Avis, CreateAvisInput, AvisWithStats } from '@/types';

export const avisApi = {
  async byUser(userId: number): Promise<AvisWithStats> {
    const response = await apiClient.get<AvisWithStats>(endpoints.avis.byUser(userId));
    return response.data;
  },

  async create(data: CreateAvisInput): Promise<Avis> {
    const response = await apiClient.post<Avis>(endpoints.avis.create, data);
    return response.data;
  },

  async update(id: number, data: CreateAvisInput): Promise<Avis> {
    const response = await apiClient.put<Avis>(endpoints.avis.update(id), data);
    return response.data;
  },

  async delete(id: number): Promise<void> {
    await apiClient.delete(endpoints.avis.delete(id));
  },
};import axios, { type AxiosInstance, type AxiosError } from 'axios';
import type { ApiError } from '@/types';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api';

export const apiClient: AxiosInstance = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true, // Important pour les cookies
});

// Intercepteur de réponse pour gérer les erreurs
apiClient.interceptors.response.use(
  (response) => response,
  (error: AxiosError<ApiError>) => {
    if (error.response?.data) {
      // Erreur API structurée
      return Promise.reject(error.response.data);
    }
    
    // Erreur réseau ou autre
    return Promise.reject({
      error: true,
      message: error.message || 'Une erreur est survenue',
      statusCode: error.response?.status || 500,
    } as ApiError);
  }
);

export default apiClient;import apiClient from './client';
import { endpoints } from './endpoints';
import type { 
  Demande, 
  CreateDemandeInput, 
  UpdateDemandeInput, 
  DemandeFilters,
  DemandeStatut,
  PaginatedResponse 
} from '@/types';

export const demandesApi = {
  async list(page = 1, limit = 10, filters?: DemandeFilters): Promise<PaginatedResponse<Demande>> {
    const response = await apiClient.get<PaginatedResponse<Demande>>(endpoints.demandes.list, {
      params: { page, limit, ...filters },
    });
    return response.data;
  },

  async show(id: number): Promise<Demande> {
    const response = await apiClient.get<Demande>(endpoints.demandes.show(id));
    return response.data;
  },

  async create(data: CreateDemandeInput): Promise<Demande> {
    const response = await apiClient.post<Demande>(endpoints.demandes.create, data);
    return response.data;
  },

  async update(id: number, data: UpdateDemandeInput): Promise<Demande> {
    const response = await apiClient.put<Demande>(endpoints.demandes.update(id), data);
    return response.data;
  },

  async updateStatus(id: number, statut: DemandeStatut): Promise<Demande> {
    const response = await apiClient.patch<Demande>(endpoints.demandes.updateStatus(id), { statut });
    return response.data;
  },

  async delete(id: number): Promise<void> {
    await apiClient.delete(endpoints.demandes.delete(id));
  },

  async byUser(userId: number): Promise<Demande[]> {
    const response = await apiClient.get<Demande[]>(endpoints.demandes.byUser(userId));
    return response.data;
  },
};export const endpoints = {
  // Auth
  auth: {
    login: '/login',
    register: '/register',
    logout: '/logout',
    me: '/me',
  },

  // Users
  users: {
    list: '/users',
    show: (id: number) => `/users/${id}`,
    updateMe: '/users/me',
    search: '/users/search',
  },

  // Voyages
  voyages: {
    list: '/voyages',
    show: (id: number) => `/voyages/${id}`,
    create: '/voyages',
    update: (id: number) => `/voyages/${id}`,
    updateStatus: (id: number) => `/voyages/${id}/statut`,
    delete: (id: number) => `/voyages/${id}`,
    byUser: (userId: number) => `/voyages/user/${userId}`,
  },

  // Demandes
  demandes: {
    list: '/demandes',
    show: (id: number) => `/demandes/${id}`,
    create: '/demandes',
    update: (id: number) => `/demandes/${id}`,
    updateStatus: (id: number) => `/demandes/${id}/statut`,
    delete: (id: number) => `/demandes/${id}`,
    byUser: (userId: number) => `/demandes/user/${userId}`,
  },

  // Messages
  messages: {
    send: '/messages',
    conversations: '/messages/conversations',
    conversation: (userId: number) => `/messages/conversation/${userId}`,
    markRead: (userId: number) => `/messages/conversation/${userId}/mark-read`,
    unreadCount: '/messages/unread-count',
    delete: (id: number) => `/messages/${id}`,
  },

  // Notifications
  notifications: {
    list: '/notifications',
    unread: '/notifications/unread',
    unreadCount: '/notifications/unread-count',
    markRead: (id: number) => `/notifications/${id}/mark-read`,
    markAllRead: '/notifications/mark-all-read',
    delete: (id: number) => `/notifications/${id}`,
  },

  // Favoris
  favoris: {
    list: '/favoris',
    voyages: '/favoris/voyages',
    demandes: '/favoris/demandes',
    addVoyage: (voyageId: number) => `/favoris/voyage/${voyageId}`,
    addDemande: (demandeId: number) => `/favoris/demande/${demandeId}`,
    remove: (id: number) => `/favoris/${id}`,
  },

  // Avis
  avis: {
    byUser: (userId: number) => `/avis/user/${userId}`,
    create: '/avis',
    update: (id: number) => `/avis/${id}`,
    delete: (id: number) => `/avis/${id}`,
  },

  // Signalements
  signalements: {
    list: '/signalements',
    create: '/signalements',
    process: (id: number) => `/signalements/${id}/traiter`,
    pendingCount: '/signalements/pending-count',
  },
} as const;import apiClient from './client';
import { endpoints } from './endpoints';
import type { Favori } from '@/types';

export const favorisApi = {
  async list(): Promise<Favori[]> {
    const response = await apiClient.get<Favori[]>(endpoints.favoris.list);
    return response.data;
  },

  async getVoyages(): Promise<Favori[]> {
    const response = await apiClient.get<Favori[]>(endpoints.favoris.voyages);
    return response.data;
  },

  async getDemandes(): Promise<Favori[]> {
    const response = await apiClient.get<Favori[]>(endpoints.favoris.demandes);
    return response.data;
  },

  async addVoyage(voyageId: number): Promise<Favori> {
    const response = await apiClient.post<Favori>(endpoints.favoris.addVoyage(voyageId));
    return response.data;
  },

  async addDemande(demandeId: number): Promise<Favori> {
    const response = await apiClient.post<Favori>(endpoints.favoris.addDemande(demandeId));
    return response.data;
  },

  async remove(id: number): Promise<void> {
    await apiClient.delete(endpoints.favoris.remove(id));
  },
};import apiClient from './client';
import { endpoints } from './endpoints';
import type { Message, SendMessageInput, Conversation, ApiResponse } from '@/types';

export const messagesApi = {
  async send(data: SendMessageInput): Promise<Message> {
    const response = await apiClient.post<Message>(endpoints.messages.send, data);
    return response.data;
  },

  async getConversations(): Promise<Conversation[]> {
    const response = await apiClient.get<Conversation[]>(endpoints.messages.conversations);
    return response.data;
  },

  async getConversation(userId: number): Promise<Message[]> {
    const response = await apiClient.get<Message[]>(endpoints.messages.conversation(userId));
    return response.data;
  },

  async markAsRead(userId: number): Promise<void> {
    await apiClient.post(endpoints.messages.markRead(userId));
  },

  async getUnreadCount(): Promise<number> {
    const response = await apiClient.get<ApiResponse<{ count: number }>>(endpoints.messages.unreadCount);
    return response.data.count || 0;
  },

  async delete(id: number): Promise<void> {
    await apiClient.delete(endpoints.messages.delete(id));
  },
};import apiClient from './client';
import { endpoints } from './endpoints';
import type { Notification, ApiResponse } from '@/types';

export const notificationsApi = {
  async list(): Promise<Notification[]> {
    const response = await apiClient.get<Notification[]>(endpoints.notifications.list);
    return response.data;
  },

  async getUnread(): Promise<Notification[]> {
    const response = await apiClient.get<Notification[]>(endpoints.notifications.unread);
    return response.data;
  },

  async getUnreadCount(): Promise<number> {
    const response = await apiClient.get<ApiResponse<{ count: number }>>(endpoints.notifications.unreadCount);
    return response.data.count || 0;
  },

  async markAsRead(id: number): Promise<void> {
    await apiClient.post(endpoints.notifications.markRead(id));
  },

  async markAllAsRead(): Promise<void> {
    await apiClient.post(endpoints.notifications.markAllRead);
  },

  async delete(id: number): Promise<void> {
    await apiClient.delete(endpoints.notifications.delete(id));
  },
};import apiClient from './client';
import { endpoints } from './endpoints';
import type { 
  Signalement, 
  CreateSignalementInput, 
  TraiterSignalementInput,
  PaginatedResponse,
  ApiResponse 
} from '@/types';

export const signalementsApi = {
  async list(page = 1, limit = 10, statut?: string): Promise<PaginatedResponse<Signalement>> {
    const response = await apiClient.get<PaginatedResponse<Signalement>>(endpoints.signalements.list, {
      params: { page, limit, statut },
    });
    return response.data;
  },

  async create(data: CreateSignalementInput): Promise<Signalement> {
    const response = await apiClient.post<Signalement>(endpoints.signalements.create, data);
    return response.data;
  },

  async process(id: number, data: TraiterSignalementInput): Promise<Signalement> {
    const response = await apiClient.patch<Signalement>(endpoints.signalements.process(id), data);
    return response.data;
  },

  async getPendingCount(): Promise<number> {
    const response = await apiClient.get<ApiResponse<{ count: number }>>(endpoints.signalements.pendingCount);
    return response.data.count || 0;
  },
};import apiClient from './client';
import { endpoints } from './endpoints';
import type { User, UpdateUserInput, PaginatedResponse } from '@/types';

export const usersApi = {
  async list(page = 1, limit = 10): Promise<PaginatedResponse<User>> {
    const response = await apiClient.get<PaginatedResponse<User>>(endpoints.users.list, {
      params: { page, limit },
    });
    return response.data;
  },

  async show(id: number): Promise<User> {
    const response = await apiClient.get<User>(endpoints.users.show(id));
    return response.data;
  },

  async updateMe(data: UpdateUserInput): Promise<User> {
    const response = await apiClient.put<User>(endpoints.users.updateMe, data);
    return response.data;
  },

  async search(query: string): Promise<User[]> {
    const response = await apiClient.get<User[]>(endpoints.users.search, {
      params: { q: query },
    });
    return response.data;
  },
};import apiClient from './client';
import { endpoints } from './endpoints';
import type { 
  Voyage, 
  CreateVoyageInput, 
  UpdateVoyageInput, 
  VoyageFilters,
  VoyageStatut,
  PaginatedResponse 
} from '@/types';

export const voyagesApi = {
  async list(page = 1, limit = 10, filters?: VoyageFilters): Promise<PaginatedResponse<Voyage>> {
    const response = await apiClient.get<PaginatedResponse<Voyage>>(endpoints.voyages.list, {
      params: { page, limit, ...filters },
    });
    return response.data;
  },

  async show(id: number): Promise<Voyage> {
    const response = await apiClient.get<Voyage>(endpoints.voyages.show(id));
    return response.data;
  },

  async create(data: CreateVoyageInput): Promise<Voyage> {
    const response = await apiClient.post<Voyage>(endpoints.voyages.create, data);
    return response.data;
  },

  async update(id: number, data: UpdateVoyageInput): Promise<Voyage> {
    const response = await apiClient.put<Voyage>(endpoints.voyages.update(id), data);
    return response.data;
  },

  async updateStatus(id: number, statut: VoyageStatut): Promise<Voyage> {
    const response = await apiClient.patch<Voyage>(endpoints.voyages.updateStatus(id), { statut });
    return response.data;
  },

  async delete(id: number): Promise<void> {
    await apiClient.delete(endpoints.voyages.delete(id));
  },

  async byUser(userId: number): Promise<Voyage[]> {
    const response = await apiClient.get<Voyage[]>(endpoints.voyages.byUser(userId));
    return response.data;
  },
};