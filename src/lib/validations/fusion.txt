import { z } from 'zod';

export const loginSchema = z.object({
  email: z .string() .min(1, 'L\'email est requis') .email('Email invalide'),
  password: z
    .string()
    .min(1, 'Le mot de passe est requis')
    .min(8, 'Le mot de passe doit contenir au moins 8 caractères'),
});

export const registerSchema = z
  .object({
    nom: z
      .string()
      .min(1, 'Le nom est requis')
      .min(2, 'Le nom doit contenir au moins 2 caractères')
      .max(50, 'Le nom ne peut pas dépasser 50 caractères'),
    prenom: z
      .string()
      .min(1, 'Le prénom est requis')
      .min(2, 'Le prénom doit contenir au moins 2 caractères')
      .max(50, 'Le prénom ne peut pas dépasser 50 caractères'),
    email: z .string() .min(1, 'L\'email est requis') .email('Email invalide'),
    password: z
      .string()
      .min(1, 'Le mot de passe est requis')
      .min(8, 'Le mot de passe doit contenir au moins 8 caractères')
      .regex(/[a-z]/, 'Le mot de passe doit contenir au moins une minuscule')
      .regex(/[A-Z]/, 'Le mot de passe doit contenir au moins une majuscule')
      .regex(/[0-9]/, 'Le mot de passe doit contenir au moins un chiffre'),
    confirmPassword: z.string().min(1, 'Veuillez confirmer le mot de passe'),
    telephone: z
      .string()
      .min(1, 'Le téléphone est requis')
      .regex(
        /^(\+237)?[0-9]{9}$/,
        'Numéro de téléphone invalide (format: +237XXXXXXXXX)'
      ),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: 'Les mots de passe ne correspondent pas',
    path: ['confirmPassword'],
  });

export const changePasswordSchema = z
  .object({
    currentPassword: z.string().min(1, 'Le mot de passe actuel est requis'),
    newPassword: z
      .string()
      .min(1, 'Le nouveau mot de passe est requis')
      .min(8, 'Le mot de passe doit contenir au moins 8 caractères')
      .regex(/[a-z]/, 'Le mot de passe doit contenir au moins une minuscule')
      .regex(/[A-Z]/, 'Le mot de passe doit contenir au moins une majuscule')
      .regex(/[0-9]/, 'Le mot de passe doit contenir au moins un chiffre'),
    confirmNewPassword: z
      .string()
      .min(1, 'Veuillez confirmer le nouveau mot de passe'),
  })
  .refine((data) => data.newPassword === data.confirmNewPassword, {
    message: 'Les mots de passe ne correspondent pas',
    path: ['confirmNewPassword'],
  });

export const forgotPasswordSchema = z.object({
  email: z.string().min(1, "L'email est requis").email('Email invalide'),
});

export const resetPasswordSchema = z
  .object({
    token: z.string().min(1, 'Token invalide'),
    password: z
      .string()
      .min(1, 'Le mot de passe est requis')
      .min(8, 'Le mot de passe doit contenir au moins 8 caractères')
      .regex(/[a-z]/, 'Le mot de passe doit contenir au moins une minuscule')
      .regex(/[A-Z]/, 'Le mot de passe doit contenir au moins une majuscule')
      .regex(/[0-9]/, 'Le mot de passe doit contenir au moins un chiffre'),
    confirmPassword: z.string().min(1, 'Veuillez confirmer le mot de passe'),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: 'Les mots de passe ne correspondent pas',
    path: ['confirmPassword'],
  });

export type LoginFormData = z.infer<typeof loginSchema>;
export type RegisterFormData = z.infer<typeof registerSchema>;
export type ChangePasswordFormData = z.infer<typeof changePasswordSchema>;
export type ForgotPasswordFormData = z.infer<typeof forgotPasswordSchema>;
export type ResetPasswordFormData = z.infer<typeof resetPasswordSchema>;
import { z } from 'zod';

export const createAvisSchema = z.object({
  cibleId: z
    .number({
        error: 'ID utilisateur invalide',
    })
    .positive('ID utilisateur invalide'),
  voyageId: z
    .number()
    .positive('ID voyage invalide')
    .optional(),
  note: z
    .number({
        error: 'La note doit être un nombre',
    })
    .min(1, 'La note minimum est 1')
    .max(5, 'La note maximum est 5')
    .int('La note doit être un nombre entier'),
  commentaire: z
    .string()
    .max(500, 'Le commentaire ne peut pas dépasser 500 caractères')
    .optional(),
});

export type CreateAvisFormData = z.infer<typeof createAvisSchema>;import { z } from 'zod';

export const createDemandeSchema = z.object({
  villeDepart: z
    .string()
    .min(1, 'La ville de départ est requise')
    .min(2, 'La ville de départ doit contenir au moins 2 caractères')
    .max(100, 'La ville de départ ne peut pas dépasser 100 caractères'),
  villeArrivee: z
    .string()
    .min(1, 'La ville d\'arrivée est requise')
    .min(2, 'La ville d\'arrivée doit contenir au moins 2 caractères')
    .max(100, 'La ville d\'arrivée ne peut pas dépasser 100 caractères'),
  dateLimite: z
    .string()
    .refine((date) => {
      if (!date) return true; // Optional
      const selectedDate = new Date(date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      return selectedDate >= today;
    }, 'La date limite ne peut pas être dans le passé')
    .optional(),
  poidsEstime: z
    .number({
        error: 'Le poids doit être un nombre',
    })
    .min(0.1, 'Le poids doit être d\'au moins 0.1 kg')
    .max(50, 'Le poids ne peut pas dépasser 50 kg'),
  description: z
    .string()
    .min(1, 'La description est requise')
    .min(10, 'La description doit contenir au moins 10 caractères')
    .max(1000, 'La description ne peut pas dépasser 1000 caractères'),
});

export const updateDemandeSchema = z.object({
  villeDepart: z
    .string()
    .min(2, 'La ville de départ doit contenir au moins 2 caractères')
    .max(100, 'La ville de départ ne peut pas dépasser 100 caractères')
    .optional(),
  villeArrivee: z
    .string()
    .min(2, 'La ville d\'arrivée doit contenir au moins 2 caractères')
    .max(100, 'La ville d\'arrivée ne peut pas dépasser 100 caractères')
    .optional(),
  dateLimite: z
    .string()
    .refine((date) => {
      if (!date) return true;
      const selectedDate = new Date(date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      return selectedDate >= today;
    }, 'La date limite ne peut pas être dans le passé')
    .optional(),
  poidsEstime: z
    .number()
    .min(0.1, 'Le poids doit être d\'au moins 0.1 kg')
    .max(50, 'Le poids ne peut pas dépasser 50 kg')
    .optional(),
  description: z
    .string()
    .min(10, 'La description doit contenir au moins 10 caractères')
    .max(1000, 'La description ne peut pas dépasser 1000 caractères')
    .optional(),
});

export const demandeFiltersSchema = z.object({
  villeDepart: z.string().optional(),
  villeArrivee: z.string().optional(),
  statut: z.enum(['en_recherche', 'voyageur_trouve', 'annulee']).optional(),
});

export type CreateDemandeFormData = z.infer<typeof createDemandeSchema>;
export type UpdateDemandeFormData = z.infer<typeof updateDemandeSchema>;
export type DemandeFiltersFormData = z.infer<typeof demandeFiltersSchema>;/**
 * Export centralisé de tous les schémas de validation
 */

// Auth
export * from './auth.schema';

// Voyage
export * from './voyage.schema';

// Demande
export * from './demande.schema';

// User
export * from './user.schema';

// Message
export * from './message.schema';

// Avis
export * from './avis.schema';

// Signalement
export * from './signalement.schema';import { z } from 'zod';

export const sendMessageSchema = z.object({
  destinataireId: z
    .number({
        error: 'ID destinataire invalide',
    })
    .positive('ID destinataire invalide'),
  contenu: z
    .string()
    .min(1, 'Le message ne peut pas être vide')
    .max(2000, 'Le message ne peut pas dépasser 2000 caractères')
    .refine(
      (text) => text.trim().length > 0,
      'Le message ne peut pas contenir uniquement des espaces'
    ),
});

export type SendMessageFormData = z.infer<typeof sendMessageSchema>;import { z } from 'zod';

export const createSignalementSchema = z.object({
  voyageId: z
    .number()
    .positive('ID voyage invalide')
    .optional(),
  demandeId: z
    .number()
    .positive('ID demande invalide')
    .optional(),
  motif: z.enum(
    ['contenu_inapproprie', 'spam', 'arnaque', 'objet_illegal', 'autre'],
    {
        error: 'Motif invalide',
    }
  ),
  description: z
    .string()
    .min(1, 'La description est requise')
    .min(20, 'La description doit contenir au moins 20 caractères')
    .max(1000, 'La description ne peut pas dépasser 1000 caractères'),
}).refine(
  (data) => data.voyageId || data.demandeId,
  'Vous devez signaler soit un voyage, soit une demande'
);

export const traiterSignalementSchema = z.object({
  statut: z.enum(['traite', 'rejete'], {
    error: 'Statut invalide',
  }),
  reponseAdmin: z
    .string()
    .max(500, 'La réponse ne peut pas dépasser 500 caractères')
    .optional(),
});

export type CreateSignalementFormData = z.infer<typeof createSignalementSchema>;
export type TraiterSignalementFormData = z.infer<typeof traiterSignalementSchema>;import { z } from 'zod';

export const updateUserSchema = z.object({
  nom: z
    .string()
    .min(2, 'Le nom doit contenir au moins 2 caractères')
    .max(50, 'Le nom ne peut pas dépasser 50 caractères')
    .optional(),
  prenom: z
    .string()
    .min(2, 'Le prénom doit contenir au moins 2 caractères')
    .max(50, 'Le prénom ne peut pas dépasser 50 caractères')
    .optional(),
  telephone: z
    .string()
    .regex(/^(\+237)?[0-9]{9}$/, 'Numéro de téléphone invalide (format: +237XXXXXXXXX)')
    .optional(),
  bio: z
    .string()
    .max(500, 'La bio ne peut pas dépasser 500 caractères')
    .optional(),
  photo: z
    .string()
    .url('URL de photo invalide')
    .optional(),
});

export const searchUserSchema = z.object({
  query: z
    .string()
    .min(2, 'La recherche doit contenir au moins 2 caractères')
    .max(100, 'La recherche ne peut pas dépasser 100 caractères'),
});

export type UpdateUserFormData = z.infer<typeof updateUserSchema>;
export type SearchUserFormData = z.infer<typeof searchUserSchema>;import { z } from 'zod';

export const createVoyageSchema = z.object({
  villeDepart: z
    .string()
    .min(1, 'La ville de départ est requise')
    .min(2, 'La ville de départ doit contenir au moins 2 caractères')
    .max(100, 'La ville de départ ne peut pas dépasser 100 caractères'),
  villeArrivee: z
    .string()
    .min(1, 'La ville d\'arrivée est requise')
    .min(2, 'La ville d\'arrivée doit contenir au moins 2 caractères')
    .max(100, 'La ville d\'arrivée ne peut pas dépasser 100 caractères'),
  dateDepart: z
    .string()
    .min(1, 'La date de départ est requise')
    .refine((date) => {
      const selectedDate = new Date(date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      return selectedDate >= today;
    }, 'La date de départ ne peut pas être dans le passé'),
  dateArrivee: z
    .string()
    .min(1, 'La date d\'arrivée est requise'),
  poidsDisponible: z
    .number({
        error: 'Le poids doit être un nombre',
    })
    .min(1, 'Le poids doit être d\'au moins 1 kg')
    .max(100, 'Le poids ne peut pas dépasser 100 kg'),
  description: z
    .string()
    .max(500, 'La description ne peut pas dépasser 500 caractères')
    .optional(),
}).refine((data) => {
  const depart = new Date(data.dateDepart);
  const arrivee = new Date(data.dateArrivee);
  return arrivee > depart;
}, {
  message: 'La date d\'arrivée doit être après la date de départ',
  path: ['dateArrivee'],
});

export const updateVoyageSchema = z.object({
  villeDepart: z
    .string()
    .min(2, 'La ville de départ doit contenir au moins 2 caractères')
    .max(100, 'La ville de départ ne peut pas dépasser 100 caractères')
    .optional(),
  villeArrivee: z
    .string()
    .min(2, 'La ville d\'arrivée doit contenir au moins 2 caractères')
    .max(100, 'La ville d\'arrivée ne peut pas dépasser 100 caractères')
    .optional(),
  dateDepart: z
    .string()
    .refine((date) => {
      const selectedDate = new Date(date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      return selectedDate >= today;
    }, 'La date de départ ne peut pas être dans le passé')
    .optional(),
  dateArrivee: z
    .string()
    .optional(),
  poidsDisponible: z
    .number()
    .min(1, 'Le poids doit être d\'au moins 1 kg')
    .max(100, 'Le poids ne peut pas dépasser 100 kg')
    .optional(),
  description: z
    .string()
    .max(500, 'La description ne peut pas dépasser 500 caractères')
    .optional(),
});

export const voyageFiltersSchema = z.object({
  villeDepart: z.string().optional(),
  villeArrivee: z.string().optional(),
  dateDepart: z.string().optional(),
  statut: z.enum(['actif', 'complet', 'termine', 'annule']).optional(),
});

export type CreateVoyageFormData = z.infer<typeof createVoyageSchema>;
export type UpdateVoyageFormData = z.infer<typeof updateVoyageSchema>;
export type VoyageFiltersFormData = z.infer<typeof voyageFiltersSchema>;